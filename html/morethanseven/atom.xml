<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Morethanseven]]></title>
  <link href="http://www.morethanseven.net/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-06-23T08:46:24-07:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using OWASP ZAP from the command line]]></title>
    <link href="http://www.morethanseven.net/2014/06/23/using-owasp-zap-from-the-command-line/"/>
    <updated>2014-06-23T08:24:00-07:00</updated>
    <id>http://www.morethanseven.net/2014/06/23/using-owasp-zap-from-the-command-line</id>
    <content type="html"><![CDATA[<p>I&#8217;m a big fan of <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP ZAP</a> or
the Zed Attack Proxy. It&#8217;s suprisingly user friendly and nicely pulls of
it&#8217;s aim of being useful to developers as well as more hardcore penetration testers.</p>

<p>One of the features I&#8217;m particularly fond of is the aforementioned
proxy. Basically it can act as a transparent HTTP proxy, recording the
traffic, and then analyse that to conduct various active security tests;
looking for XSS issues or directory traversal vulnerabilities for
instance. The simplest way of seeding the ZAP with something to analyse is using
the simple inbuilt spider.</p>

<p>So far, so good. Unfortunately ZAP isn&#8217;t designed to be used from the
command line. It&#8217;s either a thick client, or it&#8217;s a proxy with a simple
API. Enter <a href="https://github.com/garethr/zapr">Zapr</a>.</p>

<p>Zapr is a pretty simple wrapper around the ZAP API (using the
<a href="https://github.com/vpereira/owasp_zap">owasp_zap</a> library under the
hood). All it does is:</p>

<ul>
<li>Launch the proxy in headless mode</li>
<li>Trigger the spider</li>
<li>Launch various attacks against the collected URLs</li>
<li>Print out the results</li>
</ul>


<p>This is fairly limited, in that a spider isn&#8217;t going to work
particularly well for a mor interactive application, but it&#8217;s a farily good
starting point. I may add different seed methods in the future (or would
happily accept pull requests). Usage wise it&#8217;s as simple as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zapr --summary http://localhost:3000/</span></code></pre></td></tr></table></div></figure>


<p>That will print you out something like the following, assuming it finds
an issue.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+-----------------------------------+----------+----------------------------------------+
</span><span class='line'>| Alert                             | Risk     | URL                                    |
</span><span class='line'>+-----------------------------------+----------+----------------------------------------+
</span><span class='line'>| Cross Site Scripting (Reflected)  | High     |http://localhost:3000/forgot_password   |
</span><span class='line'>+-----------------------------------+----------+----------------------------------------+</span></code></pre></td></tr></table></div></figure>


<p>The above alert is taken from a <a href="https://github.com/garethr/zapr-example">simple example</a>,
using the <a href="https://github.com/OWASP/railsgoat">RailsGoat</a> vulnerable web
application as a scape goat. You can see the resulting output from
<a href="https://travis-ci.org/garethr/zapr-example">Travis running the tests</a>.</p>

<p>Zapr is a bit of a proof of concept so it&#8217;s not particularly robust or
well tested. Depending on usage and interest I may tidy it up and extend
it, or I may leave it as a useful experiment and try and finally get ZAP
support into <a href="http://gauntlt.org">Gauntlt</a>, only time will tell.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Consul, DNS and Dnsmasq]]></title>
    <link href="http://www.morethanseven.net/2014/04/25/consul/"/>
    <updated>2014-04-25T10:40:00-07:00</updated>
    <id>http://www.morethanseven.net/2014/04/25/consul</id>
    <content type="html"><![CDATA[<p>While at <a href="http://craft-conf.com/2014">Craft</a> I decided to have a quick look at
<a href="http://www.consul.io/">Consul</a>, a new service discovery framework with
a few intersting features. One of the main selling points is a DNS
interface with a nice API. The <a href="http://www.consul.io/intro/index.html">Introduction</a>
shows how to use this via the dig command line tool, but how do you use
a custom internal DNS server without modifying all your applications?
One answer to this question is
<a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">Dnsmasq</a>.</p>

<p>I&#8217;m not explaining Consul here, the above mentioned introduction does a
good job of stepping through the setup. The following assumes you have
installed and started consul.</p>

<h2>Installation and configuration</h2>

<p>I&#8217;m running these examples on an Ubuntu 14.04 machine, but dnsmasq
should be available and packaged for lots of different operating
systems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install dnsmasq
</span></code></pre></td></tr></table></div></figure>


<p>Once installed we can create a very simple configuration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s2">&quot;server=/consul/127.0.0.1#8600&quot;</span> &gt; /etc/dnsmasq.d/10-consul
</span></code></pre></td></tr></table></div></figure>


<p>All we&#8217;re doing here is specifying that DNS requests for consul services
are to be dealt with by the DNS server at 127.0.0.1 on port 8600. Unless
you&#8217;ve changed the consul defaults this should work.</p>

<p>Just in case you prefer Puppet their is already a handy
<a href="https://github.com/saz/puppet-dnsmasq">dnsmasq</a> module. The resulting
puppet code then looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kn">include</span> <span class="nc">dnsmasq</span>
</span><span class='line'><span class="nc">dnsmasq::conf</span> <span class="p">{</span> <span class="s1">&#39;consul&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="nt">ensure</span>  <span class="p">=&gt;</span> <span class="ss">present</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">content</span> <span class="p">=&gt;</span> <span class="s1">&#39;server=/consul/127.0.0.1#8600&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Usage</h2>

<p>The examples from the main documentation specify a custom DNS server for
dig like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dig @127.0.0.1 -p 8600 web.service.consul
</span></code></pre></td></tr></table></div></figure>


<p>With Dnsmasq installed and configured as above you should just be able
to do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dig web.service.consul
</span></code></pre></td></tr></table></div></figure>


<p>And now any of your existing applications will be able to use your
consul instance for service discovery via DNS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Vagrant runs with Cucumber]]></title>
    <link href="http://www.morethanseven.net/2014/03/15/testing-vagrant-runs-with-cucumber/"/>
    <updated>2014-03-15T20:42:00-07:00</updated>
    <id>http://www.morethanseven.net/2014/03/15/testing-vagrant-runs-with-cucumber</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been a big fan of <a href="http://www.vagrantup.com/">Vagrant</a> since it&#8217;s
initial release and still find myself using it for various tasks.</p>

<p>Recently I&#8217;ve been using it to test collections of Puppet modules. For a
single host
<a href="https://github.com/jvoorhis/vagrant-serverspec">vagrant-serverspec</a> is
excellent. Simply install the plugin, add a provisioner and write your
<a href="http://serverspec.org/">serverspec</a> tests. The serverspec provisioner
looks like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:serverspec</span> <span class="k">do</span> <span class="o">|</span><span class="n">spec</span><span class="o">|</span>
</span><span class='line'>  <span class="n">spec</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;*_spec.rb&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I also found myself wanting to test behaviour from the host
(serverspec tests are run on the guest), and also wanted to write tests
that checked the behaviour of a multi-box setup. I started by simply
writing some <a href="http://cukes.info/">Cucumber</a> tests which I ran locally,
but I decided I wanted this integrated with vagrant. Enter
<a href="https://github.com/garethr/vagrant-cucumber-host">vagrant-cucumber-host</a>.
This implements a new vagrant provisioner which runs a set of cucumber
features locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="ss">:cucumber</span> <span class="k">do</span> <span class="o">|</span><span class="n">cucumber</span><span class="o">|</span>
</span><span class='line'>  <span class="n">cucumber</span><span class="o">.</span><span class="n">features</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just drop your features in the features folder and run <code>vagrant
provision</code>. If you just want to run the cucumber features, without any
of the other provisioners running you can use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant provision --provision-with cucumber
</span></code></pre></td></tr></table></div></figure>


<p>Another advantage of writing this as a vagrant plugin is that it uses
the Ruby bundled with vagrant, meaning you just install the plugin
rather than faff about with a local Ruby install.</p>

<p>A couple of other vagrant plugins that I&#8217;ve used to make the testing
setup easier are <a href="https://github.com/cogitatio/vagrant-hostsupdater">vagrant-hostsupdater</a>
and <a href="https://github.com/adrienthebo/vagrant-hosts">vagrant-hosts</a>. Both
help with managing hosts files, which makes writing tests without
knowing the IP addresses easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buy vs Build your Monitoring System]]></title>
    <link href="http://www.morethanseven.net/2014/02/16/buy-vs-build-your-monitoring-system/"/>
    <updated>2014-02-16T19:29:00-08:00</updated>
    <id>http://www.morethanseven.net/2014/02/16/buy-vs-build-your-monitoring-system</id>
    <content type="html"><![CDATA[<p>At the excellent <a href="http://www.theguardian.com/info/developer-blog/2014/feb/15/london-devops-meetup-held-at-the-guardian">London Devops meetup</a> last week I asked what was
apparently a controversial question:</p>

<blockquote><p>should you just use software as a service monitoring products rather than integrate lots of open source tools?</p></blockquote>

<p>This got a few people worked up and I promised a blog post.</p>

<p>Note that I wrote a post listing lots of <a href="http://www.morethanseven.net/2013/10/13/looking-into-monitoring-and-logging-tools/">open source monitoring tools</a>
not that long ago. And I&#8217;ve been to both the
<a href="http://monitorama.com/">Monitorama</a> events about open source
monitoring. And have a bunch of <a href="http://forge.puppetlabs.com/garethr?q=monitoring">Puppet modules for open source monitoring tools</a>. I&#8217;m
a fan of both open source and of open source monitoring. Please don&#8217;t
read this as an attack on either, and particularly on the work of
awesome people working on  great open source monitoring products.</p>

<h2>Some assumptions</h2>

<ol>
<li>No one product exists that does everything. I think this is true for
SaaS as much as for open source.</li>
<li>Lets work with about 200 hosts. This is a somewhat arbitrary number I
know, some people will have more and others less.</li>
<li>If it saves money we&#8217;ll pay yearly, rather than monthly or hourly.</li>
<li>We could probably get some volume discounts from some of the
suppliers, but we&#8217;ll use list prices for this post.</li>
</ol>


<h2>Show me the money</h2>

<p>So what would it cost to get up and running with a state of the art
software as a service monitoring system? In order to do this we need to
choose our software. For this post that means I&#8217;m going to pick products
I&#8217;ve used (sometimes only a bit) and like. This isn&#8217;t a comprehensive
study of all the alternatives I&#8217;m afraid - though feel free to write
your own alternative blog posts.</p>

<ul>
<li><p><a href="http://newrelic.com/">New Relic</a> provides a crazy amount of data about
the running of both your servers and your applications. This includes
application performance data, errors, low level metrics and even rolled
up method or database query performance. $149 per host per month for our
200 hosts gives us <em>$29,800</em> per month.</p></li>
<li><p><a href="https://metrics.librato.com">Librato Metrics</a> provides a fantastic way
of storing arbitrary time series data. We&#8217;re already storing lots of
data in New Relic but Metrics provides us with less opinionated software
so we can use it for anything, for instance number of logins or searches
or other business level metrics. We&#8217;ll go for a plan with 200 data sources, 100 metrics each and at 10 second resolution for a cost of <em>$3,860</em> per month.</p></li>
<li><p><a href="http://www.pagerduty.com/">Pagerduty</a> is all about the alerts side of
monitoring. Most of the other SaaS tools we&#8217;ve chosen integrate with it
so we can make sure we get actionable emails and SMS messages to the
right people at the right time. Our plan costs $18 per person per month,
so lets say we have 30 people at a cost of <em>$540</em> per month.</p></li>
<li><p><a href="https://papertrailapp.com/">Papertrail</a> is all about logs. Simple setup
your servers with syslog and Papertrail will collect, analyze and store
all your log messages. You get a browser based interface, search tools
and the ability to setup alerts. We like lots of logs so we&#8217;ll have a
plan for 2 weeks of search, 1 year archive and 100GB month of log
traffic. That all costs <em>$575</em> per month.</p></li>
<li><p><a href="https://www.getsentry.com">Sentry</a> is all about exceptions. We could be
simply logging these and sending them to Papertrail but Sentry provides
tools for tracking and rolling up occurences. We&#8217;ll go for a plan with
90 days of history and 200 events per minute at a cost of <em>$199</em> a
month.</p></li>
<li><p><a href="https://www.pingdom.com">Pingdom</a> used to provide a very simple
external check service, but now they have added more complex multistage
checks as well as real user monitoring to the basic ping. We&#8217;ll choose
the plan with 250 checks, 20 Real User Monitoring sites and 500 SMS
alerts for <em>$107 a month</em>.</p></li>
</ul>


<h2>How much!</h2>

<p>In total that all comes to <em>$35,080 (£20,922)</em> per month, or
<em>$420,960 (£251,062)</em> per year.</p>

<p>Now the first reaction of lots of people will be <em>that&#8217;s a lot of money</em>
and it is. But remember open source isn&#8217;t free either. We need to pay
for:</p>

<ul>
<li>The servers we run our monitoring software on</li>
<li>The people to operate those servers</li>
<li>The people to install and configure our monitoring software</li>
<li>The office space and other costs of employing people (like management
and hiring)</li>
</ul>


<p>I think people with the ability to build software tend to forget they
are expensive, whether as a contractor or as a full time member of
staff. And people without management experience tend to forget costs
like insurance, rent, management overhead, recruitment, etc.</p>

<p>And probably more important than these for some people we need to consider:</p>

<ul>
<li>The time taken to build a good open source monitoring system</li>
</ul>


<p>The time needed to put together a good monitoring stack based on for
instance logstash, kibana, riemann, sensu, graphite and collectd isn&#8217;t
small. And don&#8217;t forget the number of other moving parts like redis,
rabbitmq and elasticsearch that need installing configuring and
maintaining. That probably means compromising in the short term or
shipping later. In a small team how core is building your monitoring
stack to what you do as a business?</p>

<h2>But I can&#8217;t use SaaS</h2>

<p>For some people, using a software as a service product just isn&#8217;t going
to cut it. Here&#8217;s a list of reasons I can think of:</p>

<ul>
<li>Regulation constrains where your data can be stored, for instance it&#8217;s
not allowed out of the country</li>
<li>Sheer size of infrastructure, although you may be able to get a volume
discount it might not be enough</li>
</ul>


<p>I think everything else is a cost/benefit issue or personal preference
(or bias). Happy to add more to that list, but I don&#8217;t think it&#8217;s a very
long list.</p>

<h2>Conclusions</h2>

<p>I&#8217;ve purposefully not talked about the quality of the tools here, just
the cost. I&#8217;ve also not mentioned that it&#8217;s likely not an all or nothing
decision, lots of people will mix SaaS products and open source tools.</p>

<p>Whether taking a SaaS approach will be quicker, cheaper or better will
depend on your specific business context. But try and make that about
the organisation and not about the technology.</p>

<p>If you&#8217;ve never used the current crop of SaaS monitoring
tools (and not just the one&#8217;s mentioned above) then I think you&#8217;re missing
out. Even if you stick with a mainly open source monitoring stack you
might look at your tools a bit differently after you&#8217;ve experimented
with some of the commercial competition.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A template for Puppet modules]]></title>
    <link href="http://www.morethanseven.net/2014/02/05/a-template-for-puppet-modules/"/>
    <updated>2014-02-05T15:20:00-08:00</updated>
    <id>http://www.morethanseven.net/2014/02/05/a-template-for-puppet-modules</id>
    <content type="html"><![CDATA[<p>A little while ago I published a <a href="https://github.com/garethr/puppet-module-skeleton">template writing your own puppet modules</a>. It&#8217;s
very opinionated but comes out of the box with lots of the tools you
eventually find and add to your tool box. I&#8217;m posting this as it came
up at the recent <a href="http://cfgmgmtcamp.eu">Configuration Management Camp</a>
and after discussing it I realised I hadn&#8217;t actually wrote anything
about it anywhere.</p>

<h2>What do you get?</h2>

<ul>
<li>A simple install, config, service class pattern</li>
<li>Unit tests with <a href="https://github.com/rodjek/rspec-puppet">rspec-puppet</a></li>
<li>Rake tasks for <a href="https://github.com/rodjek/puppet-lint">linting</a> and <a href="https://github.com/gds-operations/puppet-syntax">syntax checking</a></li>
<li>Integration tests using <a href="https://github.com/puppetlabs/beaker">Beaker</a></li>
<li>A Modulefile to provide Forge metadata</li>
<li>Command line tools to upload to the Forge with <a href="https://github.com/maestrodev/puppet-blacksmith">blacksmith</a></li>
<li>A README based on the Puppetlabs documentation standards</li>
<li><a href="https://travis-ci.org">Travis CI</a> configuration based on the official
Puppetlabs support matrix</li>
<li>A Guardfile which can run all the tests when you change manifests</li>
</ul>


<p>Obviously you can choose not to use parts of this, or even delete
aspects, but I find that approach much quicker than starting from scratch
or copying files from previous modules and changing names.</p>

<h2>How can I use it?</h2>

<p>Simple. The following will install the module skeleton to
<code>~/.puppet/var/puppet-module/skeleton</code>. This turns out to be picked up
by the Puppet module tool.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/garethr/puppet-module-skeleton
</span><span class='line'><span class="nb">cd </span>puppet-module-skeleton
</span><span class='line'>find skeleton -type f | git checkout-index --stdin --force --prefix<span class="o">=</span><span class="s2">&quot;$HOME/.puppet/var/puppet-module/&quot;</span> --
</span></code></pre></td></tr></table></div></figure>


<p>With that in place you can then just run the following to create a new
module, where puppet-ntp is the name of our new module.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>puppet module generate puppet-ntp
</span></code></pre></td></tr></table></div></figure>


<p>We use <code>puppet module</code> like this rather than just copying the files
because otherwise you would have to rename everything from class names
to test assertions. The skeleton actually contains erb templates in
places, and running <code>puppet module generate</code> results in the module name
being available to those templates.</p>

<h2>Now what?</h2>

<p>Assuming you have run the above commands you should have a folder called
<code>puppet-ntp</code> in your current directory. <code>cd</code> into that and then install
the dependencies:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://bundler.io/">Bundler </a>is a dependency manager for Ruby. If you
don&#8217;t already have it installed you should be able to do so with the
following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler
</span></code></pre></td></tr></table></div></figure>


<p>Now you have the dependencies why not run the full test suite? This
checks syntax, lints the Puppet code and runs the unit tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rake <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unit tests give fast feedback and help make sure the code you write is
going to do what you intend, but they aren&#8217;t actually applying the
manifests to a real machine. For that you want an integration test.
You&#8217;ll need <a href="http://vagrantup.com">Vagrant</a> installed for this next
step. Lets run those as well with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rspec spec/acceptance
</span></code></pre></td></tr></table></div></figure>


<p>This will take a while, especially the first time. This uses Beaker to
download a virtual machine from Puppetlabs (if you don&#8217;t already have
it) and then brings up a new machine, applies a simple manifest, runs
the acceptance tests and then destroys the machine.</p>

<p>The <code>CONTRIBUTING.md</code> file has more information for running the test
suite.</p>

<h2>What&#8217;s new?</h2>

<p>I&#8217;ve recently added a <a href="https://github.com/guard/guard">Guardfile</a> to
help with testing. You can run this with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>guard
</span></code></pre></td></tr></table></div></figure>


<p>Now in a separate tab or pane make a change to any of the manifests. The
tests should run automatically in the tab or pane where guard is
running.</p>

<h2>Can you add this new tool?</h2>

<p>Probably. Although I started the repo a few other people have
contributed code or made improvements already. Just sent a pull request
or open an issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code coverage for Puppet modules]]></title>
    <link href="http://www.morethanseven.net/2014/01/25/code-coverage-for-puppet-modules/"/>
    <updated>2014-01-25T17:23:00-08:00</updated>
    <id>http://www.morethanseven.net/2014/01/25/code-coverage-for-puppet-modules</id>
    <content type="html"><![CDATA[<p>One of my favourite topics for a while now has been <em>infrastructure as
code</em>. Part of that involves introducing well understood programming
techniques to infrastructure - from test driven design, to refactoring
and version control. One tool I&#8217;m fond of (even with it&#8217;s potential to
be misused) is <a href="http://en.wikipedia.org/wiki/Code_coverage">code coverage</a>. I&#8217;d been meaning
to go code spelunking to see if this could be done for testing Puppet
modules.</p>

<p>The functionality is now in <a href="https://github.com/rodjek/rspec-puppet#producing-coverage-reports">master for rspec-puppet</a>
and so anyone feeling brave can use it now, or if you must wait for the
2.0.0 release. The actual implementation is inspired by the same functionality in
<a href="https://github.com/sethvargo/chefspec#reporting">ChefSpec</a>
written by <a href="https://sethvargo.com/">Seth Vargo</a>. Lots of the how came
from here, and the usage is very similar.</p>

<h2>How to use it?</h2>

<p>First add (or hopefully change) your Gemfile line item for rspec-puppet
to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;rspec-puppet&quot;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/rodjek/rspec-puppet.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then all you need to do is include the following line anywhere in a
spec.rb file in your spec directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="nc">at_exit</span> <span class="p">{</span> <span class="ss">RSpec</span><span class="p">::</span><span class="ss">Puppet</span><span class="p">::</span><span class="ss">Coverage</span><span class="m">.</span><span class="ss">report</span><span class="err">!</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>What do I get?</h2>

<p>Here&#8217;s an <a href="https://github.com/garethr/garethr-nginx">example module</a>,
including a file called
<a href="https://github.com/garethr/garethr-nginx/blob/master/spec/classes/coverage_spec.rb">coverage_spec.rb</a>.
When running the test suite with <code>rake spec</code> you now get coverage
details like so:</p>

<pre><code>Total resources:   24
Touched resources: 8
Resource coverage: 33.33%

Untouched resources:
  Class[Nginx]
  File[preferences.d]
  Anchor[apt::update]
  Class[Apt::Params]
  File[sources.list]
  Exec[Required packages: 'debian-keyring debian-archive-keyring' for nginx]
  Anchor[apt::source::nginx]
  Class[Apt::Update]
  File[configure-apt-proxy]
  Apt::Key[Add key: 7BD9BF62 from Apt::Source nginx]
  Anchor[apt::key/Add key: 7BD9BF62 from Apt::Source nginx]
  Anchor[apt::key 7BD9BF62 present]
  File[nginx.list]
  Exec[apt_update]
  File[sources.list.d]
  Exec[e407f76c6e349fc397947a4a49260a9320196cb1]
</code></pre>

<p>Here&#8217;s the output on <a href="https://travis-ci.org/garethr/garethr-nginx/jobs/17597307#L105">Travis CI</a> as
well for a recent build.</p>

<h2>Why is this useful?</h2>

<p>I&#8217;ve already found coverage useful when writing tests for a few of my
puppet modules. The information about the total number of resouces is
interesting (and potentially an indicator of complexity) but the list of
untouched resources is the main useful part. These represent both
information about what your module is doing, and potential things you
might want to test.</p>

<p>I&#8217;m hoping to find some more time to make this even better, providing
more information about untouched resources, adding some configuration
options and hopefully to integrate with the <a href="https://coveralls.io/docs/api">Coveralls API</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell provisioner for Test Kitchen]]></title>
    <link href="http://www.morethanseven.net/2014/01/12/shell-provisioner-for-test-kitchen/"/>
    <updated>2014-01-12T19:24:00-08:00</updated>
    <id>http://www.morethanseven.net/2014/01/12/shell-provisioner-for-test-kitchen</id>
    <content type="html"><![CDATA[<p>As of a few weeks ago <a href="http://kitchen.ci/">Test Kitchen</a> has a <a href="https://github.com/test-kitchen/test-kitchen/blob/master/lib/kitchen/provisioner/shell.rb">shell provisioner</a> as well as the original Chef provisioners. This opens up all sorts of interesting testing potential.</p>

<p>If you&#8217;ve not already seen Test Kitchen, probably because you&#8217;re not using Chef, it&#8217;s a tool for integration testing infrastructure code. Configured by a simple YAML file it will setup a matrix of virtual machines, using Virtualbox, AWS, OpenStack and more, run some setup code (normally applying Chef recipes) and then run a test suite (with support for Bats, ShUnit2, Rspec and Serverspec). It&#8217;s all very pluggable. With the addition of the shell provisioner it&#8217;s useful to just about anyone. To try and prove that here&#8217;s a hello world style example.</p>

<h2>Dependencies</h2>

<p>First we need to install Test Kitchen. We&#8217;ll use vagrant and virtualbox for our example too so we need a few extra dependencies. I&#8217;m going to assume you have bundler installed, if not you may be able to do so with <code>gem install bundler</code> but as the number of ways of setting a ruby environment up is greater than the number of people on the planet I&#8217;ll have to defer to instructions elsewhere for getting that far.</p>

<p>First create a file called <code>Gemfile</code> with the following contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;test-kitchen&quot;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s2">&quot;https://github.com/test-kitchen/test-kitchen.git&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;kitchen-vagrant&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;vagrant-wrapper&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run:</p>

<pre><code>bundle install
</code></pre>

<p>This should install the above software. Note that the shell provisioner is not yet in an official release so where installing direct from GitHub for the moment.</p>

<h2>Configuration</h2>

<p>Next we&#8217;ll tell Test Kitchen what we want to do. As much for demonstration purposes I&#8217;m going to grab one of the Puppetlabs boxes. This is just plain <a href="http://vagrantup.com">Vagrant</a> so feel free to substitude the <code>box</code> and <code>box_url</code> for alternatives you already have installed locally. Otherwise the first run will take a little longer as it downloads a large file.</p>

<p>Pull all of the following in a file called `.kitchen.yml&#8217;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">driver</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">vagrant</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">provisioner</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">shell</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">platforms</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">puppet-precise64</span>
</span><span class='line'>    <span class="l-Scalar-Plain">driver_config</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">box</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">puppet-precise64</span>
</span><span class='line'>      <span class="l-Scalar-Plain">box_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://puppet-vagrant-boxes.puppetlabs.com/ubuntu-server-12042-x64-vbox4210.box</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">suites</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default</span>
</span></code></pre></td></tr></table></div></figure>


<p>The shell provisioner is going to look for a file called <code>bootstrap.sh</code> by default. You can overide this but we&#8217;ll leave it for the moment. Our bootstrap script is going to do something very simple, install the ntp package. But the important part is it could do anything; run Salt, run Ansible, run Puppet, execute any arbitrary code we choose. In this case our script is completely self contained but if it needed some additional files we could put them in a directory called <code>data</code> and they would be copied to the newly created virtual machine under <code>/tmp/kitchen</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>apt-get install ntp -y
</span></code></pre></td></tr></table></div></figure>


<h2>Tests</h2>

<p>The last step is to write a test. I&#8217;m suddently finding lots of excuses to use <a href="http://serverspec.org/">Serverspec</a> so we&#8217;ll use that, but if you prefer you can use pretty much anything. The following file should be saved as  <code>test/integration/default/serverspec/ntp_spec.rb</code>. Note the <code>default</code> in the path which matches our suite above in the <code>.kitchen.yml</code> file. Test Kitchen allows for multiple suites all with separate tests based on a strong set of file path conventions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;serverspec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kp">include</span> <span class="no">Serverspec</span><span class="o">::</span><span class="no">Helper</span><span class="o">::</span><span class="no">Exec</span>
</span><span class='line'><span class="kp">include</span> <span class="no">Serverspec</span><span class="o">::</span><span class="no">Helper</span><span class="o">::</span><span class="no">DetectOS</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">before</span> <span class="ss">:all</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/sbin:/usr/sbin&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">package</span><span class="p">(</span><span class="s1">&#39;ntp&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_installed</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="n">service</span><span class="p">(</span><span class="s1">&#39;ntp&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_enabled</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_running</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Running the tests</h2>

<p>With all of that in place we&#8217;re ready to run our tests.</p>

<pre><code>bundle exec kitchen test
</code></pre>

<p>This should:</p>

<ul>
<li>download the virtual machine image if you don&#8217;t already have it locally</li>
<li>create a new virtual machine based on the image</li>
<li>run the bootstrap.sh script</li>
<li>run our serverspec test suite</li>
</ul>


<p>The real power comes from doing this iteratively as you work on code, probably code more complex than a simple one-line bash script. You can also test across multiple virtual machines at a time, for instance different operating systems or different machine roles. The <code>kitchen</code> command line tool provides lots of help too, with the ability to login to machines, verify that specific combinations of platform and suite are working and print lots of diagnotic information to aid development.</p>

<p>Hopefully this will make it into a release soon, and we&#8217;ll see more involved examples using higher level tools and more documentation. But even now I&#8217;d be looking at Test Kitchen for any infrastructure testing you might be doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Packer created images with serverspec]]></title>
    <link href="http://www.morethanseven.net/2014/01/01/testing-packer-created-images-with-serverspec/"/>
    <updated>2014-01-01T15:24:00-08:00</updated>
    <id>http://www.morethanseven.net/2014/01/01/testing-packer-created-images-with-serverspec</id>
    <content type="html"><![CDATA[<p><a href="http://www.packer.io/">Packer</a> provides a great way of describing the steps for creating a virtual machine image. But it doesn&#8217;t have a built-in way of verifying those images.</p>

<p><a href="http://serverspec.org/">Serverspec</a> provides a nice framework for writing tests against infrastructure, asserting the operation of services or the installation of packages.</p>

<p>I&#8217;m interested at the moment in building continous delivery pipelines for infrastructure components and have a simple working example of <a href="https://github.com/garethr/packer-serverspec-example">testing Packer with Serverspec</a> on
Github. The example uses the AWS builder and the Puppet provisioner but the approach should work with other combinations.</p>

<p>This doesn&#8217;t represent a complete infrastructure pipeline, but it does demonstrate an approach to automating one particular component - building base images.</p>

<h2>Testing</h2>

<p>In our example I&#8217;m using the <a href="https://github.com/puppetlabs/puppetlabs-ntp">Puppetlabs NTP</a> module to install and configure NTP. Once the Puppet provisioner has run, but before we build the AMI (or other virtal machine image) we run a test suite. For our example the tests are pretty simple:</p>

<pre><code>describe package('ntp') do
  it { should be_installed }
end

describe service('ntp') do
  it { should be_enabled   }
  it { should be_running   }
end
</code></pre>

<p>If the tests fail, Packer will stop and the AMI won&#8217;t be built. The combination of storing the code (Packer template) alongside a test suite (Serverspec) and building a new AMI whenever you change the code, makes this setup perfect for continuous integration.</p>

<h2>Wercker builds</h2>

<p>As an example of a continuous integration setup the repository contains a <a href="https://github.com/garethr/packer-serverspec-example/blob/master/wercker.yml">wercker.yml</a> configuration file for the excellent <a href="http://devcenter.wercker.com/">Wercker</a> service. Wercker makes setting up multi-step built pipelines easy and nicely configurable via a simple text file in your repository.</p>

<p>The Wercker <a href="https://app.wercker.com/#applications/52c450e489daaf145f001ad8">build for this project is public</a>. Currently the build involves downloading Packer, running <code>packer validate</code> to check the template and eventually running <code>packer build</code> to boot an instance and run our serverspec tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the web secure, one unit test at a time]]></title>
    <link href="http://www.morethanseven.net/2013/12/29/making-the-web-secure/"/>
    <updated>2013-12-29T14:28:00-08:00</updated>
    <id>http://www.morethanseven.net/2013/12/29/making-the-web-secure</id>
    <content type="html"><![CDATA[<p><em>Originally written as part of <a href="http://sysadvent.blogspot.co.uk/2013/12/day-21-making-web-secure-one-unit-test.html">Sysadvent 2013</a>.</em></p>

<p>Writing automated tests for your code is one of those things that,
once you have gotten into it, you never want to see code without tests
ever again. Why write pages and pages of documentation about how
something should work when you can write tests to show exactly how something does work? Looking at the number and quality of testing tools and frameworks (like cucumber,
rspec, <a href="https://github.com/test-kitchen/test-kitchen">Test Kitchen</a>,
<a href="http://serverspec.org/">Server Spec</a>,
<a href="https://github.com/puppetlabs/beaker">Beaker</a>,
<a href="http://casperjs.org/">Casper</a> and
<a href="http://pivotal.github.io/jasmine/">Jasmine</a> to name a few) that have
popped up in the last year or so I&#8217;m obviously not the only person who
has a thing for testing utilities.</p>

<p>One of the other things I am interested in is web application
security, so this post is all about using the tools and techniques
from unit testing to avoid common web application security issues. I&#8217;m
using Ruby in the examples but you could quickly convert these to other languages if you desire.</p>

<h2>Any port in a storm</h2>

<p>Lets start out with something simple. Accidentally exposing
applications on TCP ports can lead to data loss or introduce a vector
for attack. Maybe your main website is super secure, but you left the
port for your database open to the internet. It&#8217;s the server configuration equivalent of forgetting to lock the back door.</p>

<p>Nmap is a tool lots of people will be familiar with for spanning for
open ports. As well as a command line interface Nmap also has good
library support in lots of languages so lets try and write a simple
tests suite around it.</p>

<pre><code>require "tempfile"
require "nmap/program"
require "nmap/xml"

describe "the scanme.nmap.org website" do
  file = Tempfile.new("nmap.xml")
  before(:all) do
    Nmap::Program.scan do |nmap|
      nmap.xml = file.path
      nmap.targets = "scanme.nmap.org"
    end
  end

  @open_ports = []
  Nmap::XML.new("scan.xml") do |xml|
    xml.each_host do |host|
      host.each_port do |port|
        @open_ports &lt;&lt; port.number if port.state == :open
      end
    end
  end
end
</code></pre>

<p>With the above code in place we can then write tests like:</p>

<pre><code>it "should have two ports open" do
 @open_ports.should have(2).items
end

it "should have port 80 open" do
 @open_ports.should include(80)
end

it "should have port 22 closed" do
 @open_ports.should_not include(22)
end
</code></pre>

<p>We can run these manually, but also potentially as part of a
continuous integration build or constantly as part of a monitoring
suite.</p>

<h2>Run the Guantlt</h2>

<p>We had to do quite a bit of work wrapping Nmap before we could write
the tests above. Wouldn&#8217;t it be nice if someone had already wrapped
lots of useful security minded tools for us? <a href="http://gauntlt.org/">Gauntlt</a> is pretty much just that, it&#8217;s a security testing framework based on cucumber which currently supports curl, nmap, sslyze, sqlmap, garmr and a bunch more tools in master. Lets do something more advanced than our port scanning test above by testing a URL for a SQL injection vulnerability.</p>

<pre><code>@slow
Feature: Run sqlmap against a target
  Scenario: Identify SQL injection vulnerabilities
    Given "sqlmap" is installed
    And the following profile:
      | name       | value                                      |
      | target_url | http://localhost/sql-injection?number_id=1 |
    When I launch a "sqlmap" attack with:
      """
      python &lt;sqlmap_path&gt; -u &lt;target_url&gt; —dbms sqlite —batch -v 0 —tables
      """
    Then the output should contain:
      """
      sqlmap identified the following injection points
      """
    And the output should contain:
      """
      [2 tables]
      +-----------------+
      | numbers         |
      | sqlite_sequence |
      +-----------------+
      """
</code></pre>

<p>The Gauntlt team publish <a href="https://github.com/gauntlt/gauntlt/tree/master/examples">lots of examples</a> like this one alongside the source code, so getting started is easy. Gauntlt is very powerful, but as you&#8217;ll see from the example above you need to know quite a bit about the underlying tools it is using. In the case above you need to know the various arguments to sqlmap and also how to interpret the output.</p>

<h2>Enter Prodder</h2>

<p><a href="https://github.com/garethr/prodder">Prodder</a> is a tool I put together
to automate a few specific types of security testing. In many ways
it&#8217;s very similar to Gauntlt; it uses the cucumber testing framework
and uses some of the same tools (like nmap and sslyze) under the hood.
However rather than a general purpose security framework like Gauntlt,
Prodder is higher level and very opinionated. Here&#8217;s an example:</p>

<pre><code>Feature: SSL
  In order to ensure secure connections
  I want to check the SSL configuration of my servers
  Background:
    Given "sslyze.py" is installed
    Scenario: Check SSLv2 is disabled
      When we test using the "sslv2" protocol
      Then the exit status should be 0
      And the output should contain "SSLv2 disabled"

    Scenario: Check certificate is trusted
      When we check the certificate
      Then the output should contain "Certificate is Trusted"
      And the output should match /OK — (Common|Subject
</code></pre>

<p>Alternative) Name Matches/</p>

<pre><code>      And the output should not contain "Signature Algorithm: md5"
      And the output should not contain "Signature Algorithm: md2"
      And the output should contain "Key Size: 2048"

    Scenario: Check certificate renegotiations
      When we test certificate renegotiation
      Then the output should contain "Client-initiated
</code></pre>

<p>Renegotiations: Rejected&#8221;</p>

<pre><code>      And the output should contain "Secure Renegotiation: Supported"

    Scenario: Check SSLv3 is not using weak ciphers
      When we test using the "sslv3" protocol
      Then the output should not contain "Anon"
      And the output should not contain "96bits"
      And the output should not contain "40bits"
      And the output should not contain " 0bits"
</code></pre>

<p>This is a little higher level than the Gauntlt example — it&#8217;s not
exposing the workings of sslyze that is doing the actual testing. All
you need is an understanding of SSL certifcates. Even if you&#8217;re not an
expert on SSL you can accept the aforementioned opinions of Prodder
about what good looks like. Prodder currently contains steps and
exampes for port scanning, SSL certificates and security minded HTTP
headers. If you already have a cucumber based test suite (including
one based on Gauntlt) you can reuse the step definitions in that too.</p>

<p>I&#8217;m hoping to build upon Prodder, adding more types of tests and
getting agreement on the included opinions from the wider systems
administration community. By having a default set of shared assertions
about the expected security of out system we can more easily move onto
new projects, safe in the knowledge that a test will fail if someone
messes up our once secure configuration.</p>

<h2>I&#8217;m convinced, what should I do next?</h2>

<p>As well as trying out some of the above tools and techniques for
yourself I&#8217;d recommend encouraging more security conversations in your
development and operations teams. Here&#8217;s a few  places to start with:</p>

<ul>
<li><a href="http://www.slideshare.net/beehooze/devopsday-london-ben-hughes-security">Ben Hughes from Etsy talking about security culture at Devopsdays London</a></li>
<li><a href="https://speakerdeck.com/garethr/security-monitoring-with-open-source-penetration-testing-tools">A presentation I gave at Velocity about using penetration testing tools for monitoring purposes</a></li>
<li><a href="http://www.slideshare.net/wickett/gauntlt-velocity-eu2013">A workshop, again from Velocity all about getting started with Gauntlt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking into monitoring and logging tools]]></title>
    <link href="http://www.morethanseven.net/2013/10/13/looking-into-monitoring-and-logging-tools/"/>
    <updated>2013-10-13T12:00:00-07:00</updated>
    <id>http://www.morethanseven.net/2013/10/13/looking-into-monitoring-and-logging-tools</id>
    <content type="html"><![CDATA[<p><em>Originally published on <a href="https://medium.com/p/1cbb173faa3a">Medium</a>.</em></p>

<p>We have a bunch of internal mailing lists at <a href="http://digital.cabinetoffice.gov.uk/">work</a>, and on one of them someone asked:</p>

<blockquote><p>we’re looking into monitoring/logging tools…</p></blockquote>

<p>I ended up writing a bit of a long reply which a few people found useful, so I thought I’d repost it here for posterity. I’m sure this will date but I think it’s a reasonable snapshot of the state of open source monitoring tools at the end of 2013.</p>

<p>Simply put, think about four elements and you won’t be far off on the
technical front. Miss one and you’re probably in trouble.</p>

<ul>
<li>logs</li>
<li>metric storage</li>
<li>metric collection</li>
<li>monitoring checks</li>
</ul>


<p>For logs, some combination of syslog at one end and elasticsearch and
<a href="http://www.elasticsearch.org/overview/kibana/">Kibana</a> at the other are probably the state of the open source art at
the moment. The shipping around is more interesting; <a href="http://logstash.net/">Logstash</a> is improving constantly, <a href="http://heka-docs.readthedocs.org/en/latest/">Heka</a> is an similar alternative from Mozilla, and <a href="http://fluentd.org/">Fluentd</a> looks nice too.</p>

<p>For pure metrics it’s all about <a href="http://graphite.wikidot.com/">Graphite</a>, which is both awesome and
perilous. Not much else really competes in the open source world at
present. Maybe <a href="http://opentsdb.net/">OpenTSB</a> (is you’re into a Hadoop stack.)</p>

<p>For collecting metrics on boxes I’d probably look at <a href="http://collectd.org/">collectd</a> or <a href="https://github.com/BrightcoveOS/Diamond">diamond</a> both of which have pros and cons but work well. <a href="https://github.com/etsy/statsd/">Statsd</a> is also useful here for different types of metric collection and aggregation. <a href="http://ganglia.sourceforge.net/">Ganglia</a> is interesting too, it combines some aspects of the metrics collection tools with an integrated storage and visualisation tool similar to Graphite.</p>

<p>Monitoring checks is a bit more painful. I’ve been experimenting with <a href="http://sensuapp.org/">Sensu</a> in hope of not installing Nagios. Nagios works but it’s just a bit ungainly. But you do need somewhere to write checks against metrics or other aspects of your system and to issue alerts.</p>

<p>At this point everyone loves dashboards, and <a href="http://shopify.github.io/dashing/">Dashing</a> is particularly lovely. <a href="https://github.com/paperlesspost/graphiti">Graphiti</a> and <a href="https://github.com/obfuscurity/tasseo">Tasseo</a> for Graphite are useful too.</p>

<p>For bonus points things like <a href="http://flapjack.io/">Flapjack</a> and <a href="http://riemann.io/">Reimann</a> provide some interesting extra capabilities around alert control or real time monitoring respectively.</p>

<p>And for that elusive top of the class grade take a look at <a href="http://codeascraft.com/2013/06/11/introducing-kale/">Kale</a>, which provides anomaly detection on top of Graphite and Elasticsearch .</p>

<p>You might be thinking that’s a lot of moving parts and you’d be right. If you’re a small project running all of that is too much overhead, turning to something like Zabbix might be more sensible.</p>

<p>Depending on money/sensitivity/control issues lots of nice and not so
nice commercial products exist. <a href="http://www.circonus.com/">Circonus</a>, <a href="http://www.splunk.com/">Splunk</a>, <a href="http://newrelic.com/">New Relic</a>, <a href="http://boundary.com/">Boundary</a> and <a href="https://metrics.librato.com/">Librato Metrics</a> are all lovely in different ways and provide part of the puzzle.</p>

<p>And that’s just the boring matter of tools. Now you get into alert design and other gnarly people stuff.</p>

<p>If you got this far you should watch all the <a href="http://vimeo.com/monitorama">Monitorama videos</a> too.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Platform as a Service and the network gap]]></title>
    <link href="http://www.morethanseven.net/2013/08/11/platform-as-a-service-and-the-network-gap/"/>
    <updated>2013-08-11T14:00:00-07:00</updated>
    <id>http://www.morethanseven.net/2013/08/11/platform-as-a-service-and-the-network-gap</id>
    <content type="html"><![CDATA[<p><em>Originally published on <a href="https://medium.com/p/817849715f0a">Medium</a>.</em></p>

<p>I&#8217;m a big fan of the Platform as a Service (PaaS) model of operating web
application infrastructure. But I&#8217;m a much bigger user and exponent of
Infrastructure as a Service (IaaS) products within my current role
working for the UK Government. This post describes why that is, and
hopefully helps anyone else inside other large enterprise organisations
reason about the advantages and disadvantages, and helps PaaS vendors
and developers understand what I personally thing is a barrier to
adoption in that type of organisation.</p>

<p>A quick word of caution, I don’t know every product inside out. It’s
very possible a PaaS product exists that deals with the problems I will
describe. If you know of such a product do let me know.</p>

<h2>A simple use case</h2>

<p>PaaS products make for the very best demos. Have a working application?
Deployment is probably as simple as:</p>

<pre><code>git push azure master 
</code></pre>

<p>Your app has started to run slowly because visitors are flooding in?
Just scale out with something like:</p>

<pre><code>heroku ps:scale web+2
</code></pre>

<p>The amount of complexity being hidden is astounding and the ability to
move incredibly quickly is obvious for anyone with experience of doing
this in a more traditional organisation.</p>

<h2>A not so simple use case</h2>

<p>Even small systems are often being built out of many small services
these days. Many large organisations have been up to this for a while
under the banner of Service Orientated Architecture. I&#8217;m a big fan of
this approach, in my view it moves operational and organisational
complexity back into the development team where its impact can often be
minimised by automation. But that’s a topic for another post.</p>

<p>In a PaaS world having many services is fine. We just have more
applications running on the Platform which can be independently scaled
out to meet our needs. But services need to communicate with each other
somehow, and this is where our problems start. We’ll keep things simple
here by assuming communication is over HTTPS (which should be pretty
typical) but I don’t think other protocols make the problem I have go
away. The same problem applies if you’re using a SaaS database for
example.</p>

<h2>It’s the network, stupid</h2>

<p>Over what network does my HTTPS internal service call travel? The
internet? The internal PaaS vendor’s network? If the latter, is my
traffic travelling over the same network as other clients on the
platform? Maybe I&#8217;m running my own PaaS in-house. But do I trust
everyone else in my very large organisation and want my traffic on the
same network as other things I don’t even know about? Even if it’s just
me do I want internal service traffic mixing with requests coming from
the internet? And are all my services created equally with regards what
they can and cannot access?</p>

<p>Throw in questions like: is the PaaS supplier running on infrastructure
provided by a public IaaS suppliers who you don’t have a relationship
with and you start to question the suitability of the current public
PaaS products for building secure service based systems.</p>

<h2>A journey into Enterprise Architectures</h2>

<p>You might be thinking, pah, what’s the worst that can happen? If you
work for a small company or a shiny startup that might be completely
valid. If on the other hand you’re working in a regulated environment
(say PCI) or dealing with large volumes of highly sensitive information
you’re very likely to have to build systems that provide layers of
trust, and to be doing inspection, filtering and integrity checking as
requests flow between those layers.</p>

<p>Imagine that I have a service dealing with some sensitive data. If I
control the infrastructure (virtualised or not, IaaS provided or not)
I’ll make sure that service endpoint isn’t available to anything that
doesn’t need access to it via my network configuration. If I’m being
more thorough I’ll filter traffic through some sort of proxy that does
checking of the content; It should be JSON (or XML), it should meet this
schema, It shouldn’t exceed this rate, it shouldn’t exceed this payload
size or response size, etc. That is before anything even reaches the
services application. And that’s on top of SSL and maybe client
certificates.</p>

<p>If I don’t control the infrastructure, for example when running on a
PaaS, I lose some of the ability to have the network protect me. I can
probably get some of this back by running my own PaaS on my own
infrastructure, but without awareness and a nice interface to that
functionality at the PaaS layer I’m going to lose lots of the benefits
of running the PaaS in the first place. It’s nice that I can scale my
application out, but if new instances can’t connect to the required
backend services without some additional network configuration that’s
invisible to the PaaS what use is that?</p>

<p>The question becomes; how to implement security layers within existing
PaaS products (without changing them). And my answer is “I don’t know”.
Yet.</p>

<h2>Why isn’t SSL enough?</h2>

<p>SSL doesn’t help as much as you’d like to think here because if I’m an
attacker what I’m probably going to attack is your buggy code rather
than the transport mechanism. SSL doesn’t protect you from SQL injection
or unpatched software or zero-day exploits. If the only thing that my
backend service will talk to is my frontend application, an attacker has
to compromise two things rather than just ignore the frontend and go
after the data. Throw in a filter as described above and it’s really
three things that need to be overcome.</p>

<h2>The PaaS/IaaS interface</h2>

<p>I think part of the solution lies in exposing some of the underlying
infrastructure via the PaaS interface. IaaS is often characterised as
compute, storage and network. In my experience everyone forgets the
network part. In a PaaS world I don’t want to be exposed to storage
details (I just want it to appear infinite and pay for what I use) or
virtual machines (I just care about computing power, say RAM, not the
number of machines I’m running on) but I think I do, sometimes, want to
be exposed to the (virtual) network configuration.</p>

<p>Hopefully someone working on OpenShift or CloudFoundry or Azure or
Heroku or DotCloud or insert PaaS here is already working on this. If
not maybe this post will prompt someone to do so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web application security tools]]></title>
    <link href="http://www.morethanseven.net/2013/04/23/web-application-security-tools/"/>
    <updated>2013-04-23T07:57:00-07:00</updated>
    <id>http://www.morethanseven.net/2013/04/23/web-application-security-tools</id>
    <content type="html"><![CDATA[<p>I&#8217;ve become increasingly interested in web application security issues over the last year or so. Working in Government will do that to you. And I&#8217;ve come to the conclusion that a) there are lots of good open source security tools, b) many of them are terribly packaged and c) most developers don&#8217;t use any of them.</p>
<p>I&#8217;ve been having related conversations at recent events I&#8217;ve made it along to, including Devopsdays London which featured some good open spaces discussions on the subject. Security is one of those areas that, for many organisations, is basically outsourced to third party penetration testing firms or consultants. Specialists definitely have a role to play, but with a move towards increasingly rapid releases I think in-house security testing and monitoring is going to get more and more important.</p>
<h2>A collection of security tools</h2>
<p>I&#8217;ve started to build a <a href="https://github.com/garethr/pentesting-playground">collection of tools on GitHub</a>, along with a vagrant setup to test them out. Full instructions are available on that repository but the short version is you can run one command and have one virtual machine filled with security testing tools and, if useful, another machine running a vulnerable web application with which to test. The current list of tools runs to:</p>
<ul>
	<li><a href="http://code.google.com/p/skipfish/">skipfish</a></li>
	<li><a href="http://nmap.org/">nmap</a></li>
	<li><a href="http://www.cirt.net/nikto2">nikto</a></li>
	<li><a href="http://w3af.org/">w3af</a></li>
	<li><a href="https://github.com/mozilla/Garmr">garmr</a></li>
	<li><a href="https://github.com/iSECPartners/sslyze">sslyze</a></li>
	<li><a href="https://github.com/metachris/wpscanner">wpscanner</a></li>
	<li><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">owasp zap</a></li>
	<li><a href="http://arachni-scanner.com/">arachni</a></li>
	<li><a href="https://github.com/gauntlt/gauntlt">gauntlt</a></li>
	<li><a href="http://sqlmap.org/">sqlmap</a></li>
	<li><a href="http://wpscan.org/">wpscan</a></li>
	<li><a href="http://sourceforge.net/projects/sslscan/">sslscan</a></li>
	<li><a href="http://blog.taddong.com/2013/02/tlssled-v13.html">TLSSLed</a></li>
</ul>
<p>But I&#8217;ll add more tools as I discover them or as people file issues or pull requests.</p>
<h2>What about Backtrack?</h2>
<p>When I started investigating tools for security and penetration testing most roads led to <a href="http://www.backtrack-linux.org/">Backtrack</a>. This is a complete Linux distribution packed with a huge number of security tools, including many if not all of the above. Why then did I write puppet code rather than create a Vagrant box from Backtrack? Firstly, Backtrack is probably great if you&#8217;re a professional penetration tester, but the barrier to entry to installing a new distibution for most developers is too high in my view. And with a view to using some of these tools as part of monitoring systems I don&#8217;t always want a separate virtual machine. I want to be able to install the tools wherever I want. A good configuration management tool gives you that portability, and Vagrant gives you all the benefits of a local virtual machine.</p>
<h2>Future plans</h2>
<p>As mentioned I&#8217;d like to expand how some of these tools are used to include automated monitoring of applications, maybe look at ways of extracting data for metrics or possibily writing a Sensu plugin or two. The first step to that is probably breaking down the monolithic puppet manifest into separate modules for each tool. Along the way I can add support for more operating systems as required. I&#8217;ve already done that for the <a href="http://forge.puppetlabs.com/garethr/wackopicko">wackopicko module which is up on the Forge</a>.</p>
<p>I&#8217;m also soliciting any and all feedback, especially from developers who don&#8217;t do any security related testing but feel like they should.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Government Service Design Manual]]></title>
    <link href="http://www.morethanseven.net/2013/03/23/government-service-design-manual/"/>
    <updated>2013-03-23T17:04:00-07:00</updated>
    <id>http://www.morethanseven.net/2013/03/23/government-service-design-manual</id>
    <content type="html"><![CDATA[<p>I&#8217;ve not been writing many blog posts lately, but I have been doing quite a bit of writing elsewhere. One of the things I&#8217;ve had a hand in at work is the new <a href="https://www.gov.uk/service-manual">Government Service Design Manual</a>. This is the work of many people I work with as well as further afield. It&#8217;s intended to be a good starting place to find information about building high quality digital services.</p>
<p>The manual is in beta and we&#8217;re looking for as much feedback as possible on the whole thing. It&#8217;s already proving useful and a good way of framing the scope of discussions, but it has lots of room for improvement.</p>
<p>If you&#8217;re reading this post I&#8217;m going to wager you&#8217;re interest lies in or around devops flavoured content. The following are guides I&#8217;ve written in this area that I&#8217;d love any and all feedback on.</p>
<ul>
	<li><a href="https://www.gov.uk/service-manual/the-team/web-operations.html">Web Operations</a></li>
	<li><a href="https://www.gov.uk/service-manual/making-software/configuration-management.html">Configuration Management</a></li>
	<li><a href="https://www.gov.uk/service-manual/operations/hosting.html">Hosting</a></li>
	<li><a href="https://www.gov.uk/service-manual/making-software/information-security.html">Information Security</a></li>
	<li><a href="https://www.gov.uk/service-manual/operations/monitoring.html">Monitoring</a></li>
	<li><a href="https://www.gov.uk/service-manual/operations/load-and-performance-testing.html">Load and Performance Testing</a></li>
	<li><a href="https://www.gov.uk/service-manual/making-software/release-strategies.html">Releasing Software</a></li>
	<li><a href="https://www.gov.uk/service-manual/operations/penetration-testing.html">Vulnerability and Penetration Testing</a></li>
	<li><a href="https://www.gov.uk/service-manual/making-software/choosing-technology.html">Choosing Technology</a></li>
</ul>
<p>If you&#8217;re interested in the background to this endeavour then a couple of blog posts from some of my colleagues might be of interest too. First Richard Pope talks about <a href="http://digital.cabinetoffice.gov.uk/2013/03/21/building-the-standard/">how the manual came about</a> and here&#8217;s a post from Andrew Greenway about this <a href="http://digital.cabinetoffice.gov.uk/2013/03/21/building-the-standard/">beta testing of the service standard</a>.</p>
<p>The source for all this is on <a href="https://github.com/alphagov/government-service-design-manual">GitHub</a> so if you prefer you can just sent a pull request. Or I&#8217;m happy to get emails or comments on this post. In particular if people have good references or next steps for these guides then let me know as several of them in particular are lacking in that area.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perils of portability]]></title>
    <link href="http://www.morethanseven.net/2013/03/23/perils-of-portability/"/>
    <updated>2013-03-23T16:36:00-07:00</updated>
    <id>http://www.morethanseven.net/2013/03/23/perils-of-portability</id>
    <content type="html"><![CDATA[<p>I had fun speaking at <a href="http://qconlondon.com/">QCon</a> in London earlier this month with a talk on the Cloud track entitled the Perils of Portability.</p>
<p>This had some Governmenty stuff in but was mainly part rant, part hope for the future of cloud infrastructure. I had some great conversations with people afterwards who felt some of the similar pain which was nice to know. I also somehow managed to get 120 slides into a 40 minute presentation which I think is a personal records.</p>
<script async class="speakerdeck-embed" data-id="52f90c206ae90130747512313d140c86" data-ratio="1.33333333333333" src="http://www.morethanseven.net//speakerdeck.com/assets/embed.js"></script><p>The videos will be available at some point in the not too distant future too.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[March madness]]></title>
    <link href="http://www.morethanseven.net/2013/02/17/march-madness/"/>
    <updated>2013-02-17T17:17:00-08:00</updated>
    <id>http://www.morethanseven.net/2013/02/17/march-madness</id>
    <content type="html"><![CDATA[<p>With only a week or so to go before the end of February, it&#8217;s looking like March might be a little busy.</p>
<ul>
	<li>I&#8217;m speaking at QCon, in London on Wednesday 6th on <a href="http://qconlondon.com/london-2013/presentation/Clouds%20in%20Government%20-%20Perils%20of%20Portability">Clouds in Government &#8211; Perils of Portability</a> (which in hindsight is probably the silliest title for a talk I&#8217;ve ever used)</li>
	<li>On the 15th and 16th of March I&#8217;ll be at <a href="http://devopsdays.org/events/2013-london/">Devopsdays</a>, again in London. I&#8217;ve been helping out with organising the event and I&#8217;m very much looking forward to going along after seeing all the work being put in.</li>
	<li>And last but not least I&#8217;m heading to Boston for the rather exciting <a href="http://monitorama.com/">Monitorama</a> from the 26th until the 30th. Looking forward to meeting up in person with quite a few folks I&#8217;ve spoken to over the last year or two.</li>
</ul>
<p>If you&#8217;re going to be at any of these events (QCon and Devopsdays still have tickets available I think) then let me know.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going fast in government]]></title>
    <link href="http://www.morethanseven.net/2013/02/17/going-fast-in-government/"/>
    <updated>2013-02-17T17:08:00-08:00</updated>
    <id>http://www.morethanseven.net/2013/02/17/going-fast-in-government</id>
    <content type="html"><![CDATA[<p>About a month ago I had the good fortune of speaking at the <a href="http://www.meetup.com/London-Web-Performance-Group/">London Web Performance</a> meetup. This was one of the first talks I&#8217;ve done about our work at The Government Digital Service since the luanch of <span class="caps">GOV</span>.UK back in October. The topic was all about moving quickly in a large organisation (The UK Civil Service is about 450,000 people so I think it counts) and featured just a hand full of technical and organisational tricks we used.</p>
<script async class="speakerdeck-embed" data-id="bc48ed2042c20130b322123138156909" data-ratio="1.33333333333333" src="http://www.morethanseven.net//speakerdeck.com/assets/embed.js"></script>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django and Rails presentation from QCon]]></title>
    <link href="http://www.morethanseven.net/2013/01/13/django-and-rails-presentation-from-qcon/"/>
    <updated>2013-01-13T16:31:00-08:00</updated>
    <id>http://www.morethanseven.net/2013/01/13/django-and-rails-presentation-from-qcon</id>
    <content type="html"><![CDATA[<p>I had great fun back in November at the <a href="http://qconsf.com/">QCon</a> conference in San Francisco. As well as currating one of the tracks and catching up with people in the area I managed to give the following talk.</p>
<script async class="speakerdeck-embed" data-id="7e1dd5a03efc0130083b123139173def" data-ratio="1.33333333333333" src="http://www.morethanseven.net//speakerdeck.com/assets/embed.js"></script><p>In hindsight it might have been a bit odd to try and cover both Rails and Django examples in the one presentation but it was quite good fun putting together code examples using both of them at the same time. As well as a large set of tips, tricks and tools I settled on a few things that I think any web (or other) framework should support out of the box.</p>
<ul>
	<li>A debug toolbar</li>
	<li>Transparent caching support</li>
	<li>Hooks for instrumentation</li>
	<li>Configurable logging</li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my personal package repository]]></title>
    <link href="http://www.morethanseven.net/2012/12/30/my-personal-package-repository/"/>
    <updated>2012-12-30T16:52:00-08:00</updated>
    <id>http://www.morethanseven.net/2012/12/30/my-personal-package-repository</id>
    <content type="html"><![CDATA[<p>I&#8217;m a <a href="http://www.morethanseven.net/2011/01/16/Why-developers-should-care-about-system-packages/">big fan of system packages for lots of reasons</a> and have often ended up rolling my own debian package repository at work, or working with others that have done so. Recently I finally got round to setting up a personal package repo, at <a href="http://packages.garethrushgrove.com">packages.garethrushgrove.com</a>. More interesting than the repo is probably the tool chain I used, oh and the rather nice bootstrap based styling.</p>
<p><img src="http://image-host.appspot.com/i/img?id=agppbWFnZS1ob3N0cg0LEgVJbWFnZRjh1wIM" alt="nice looking package repository"/></p>
<p>The source code for everything is <a href="https://github.com/garethr/packages">on GitHub</a> although not much documentation exists yet. In the middle are a few shell scripts that generate the repo. Around them is a Vagrant box (which makes it easier to build packages for different achitectures or distros) and some Rake commands</p>
<pre><code>bundle exec rake -T
rake recipes:build[recipe]  # Build a package from one of the available recipes
rake recipes:list           # List available recipes
rake repo:build             # Build the repository</code></pre>
<p>The recipes commands allow for building new packages based on scripts. A few examples are included which use fpm, but you could use anything. The repo:build command triggers the debian repository to be rebuilt.</p>
<p>The vagrant configuration shares various folders between and guest and host which also opens up a few useful features. One is I can just drop any old debian package into the debs folder and run the repo:build command and it will be in my repository. The other useful capability is that the resulting repo is shared back to the host, which means I can then check it into Git and in my case push it up to Heroku.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the forge]]></title>
    <link href="http://www.morethanseven.net/2012/12/03/on-the-forge/"/>
    <updated>2012-12-03T08:18:00-08:00</updated>
    <id>http://www.morethanseven.net/2012/12/03/on-the-forge</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been spending a bit of time recently pushing a few Puppet modules to the <a href="http://forge.puppetlabs.com">Forge</a>. This is Puppetlabs attempt to make a central repository of reusable puppet modules. I started doing it as a bit of an experiment, to find out what I liked and what worked and I decided to writeup a few opinions.</p>
<p>So far I&#8217;ve shipped the following modules:</p>
<ul>
	<li><a href="http://forge.puppetlabs.com/garethr/riemann">Riemann</a></li>
	<li><a href="http://forge.puppetlabs.com/garethr/graphite">Graphite</a></li>
	<li><a href="http://forge.puppetlabs.com/garethr/logstash">Logstash</a></li>
	<li><a href="http://forge.puppetlabs.com/garethr/freight">Freight</a></li>
</ul>
<p>Quite a few of these started as forks of other modules but have evolved quite a bit towards being more reusable.</p>
<p>I&#8217;ve also started sending pull requests for modules that basically do what I want but don&#8217;t always play well with others.</p>
<ul>
	<li><a href="https://github.com/thomasvandoren/puppet-redis/pull/10">Redis</a></li>
</ul>
<h2>Improved tools</h2>
<p>It turns out the experience is mainly a pleasurable one, partly down to the much improved tooling around Puppet. Specifically I&#8217;m making extensive use of:</p>
<ul>
	<li><a href="http://rspec-puppet.com/">Rspec Puppet</a> &#8211; for writing tests for module behavious</li>
	<li><a href="https://github.com/rodjek/librarian-puppet">Librarian Puppet</a> &#8211; dependency management for modules</li>
	<li><a href="https://github.com/puppetlabs/puppetlabs_spec_helper">Puppet spec helper</a> &#8211; conventions and helpers for testing modules</li>
	<li><a href="https://travis-ci.org/">Travis CI</a> &#8211; easy continuous integration for module code</li>
	<li><a href="http://vagrantup.com/">Vagrant</a> &#8211; manage virtual machines, useful for smoke testing on different distributions</li>
</ul>
<p>Lots of those tools make testing Puppet modules both easier and useful. Here&#8217;s an example of one of the above modules being tested. Note that it&#8217;s run across Ruby 1.8.7, 1.9.2 and 1.9.3 and Puppet versions 2.7.17, 2.7.18 and 3.0.1 for a total of 9 builds. Handily the Redis module mentioned also had a test suite. The pull request includes changes to that, and Travis <a href="https://travis-ci.org/thomasvandoren/puppet-redis/builds/3462513">automatically tested the pull request</a> for the modules author.</p>
<h2>Antipatterns</h2>
<p>Using modules from the Forge really forces you to think about reusability. The pull request mentioned above for the Redis module for instance replaced an explicit mention of the build-essential package with the &#8220;puppetlabs/gcc&#8221;: class from the Forge. This makes the module less self contained, but without that change the module is incompatible with any other module that also uses that common package. I also went back and replaced explicit references to wget and build-essential in my Riemann module.</p>
<p>As a rule of thumb. For a specific module only include resources that are unique to the software the module manages. Anything else should be in another module with a dependency in the Modulefile.</p>
<p>This can feel a little much when you&#8217;re replacing a simple Package resource with a whole new module but it has two advantages I care about. As well as the ability to use the module with other third party modules more easily it also makes it more likely that the module will work cross platform.</p>
<h2>What&#8217;s missing?</h2>
<p>I&#8217;d like to see a few things improved when it comes to the Forge.</p>
<ul>
	<li>I&#8217;d like to be able to publish a new version of a module without having to use the web interface. The current workflow involves running a build command, then uploading the generated artifact via a web form after logging in.</li>
	<li>I&#8217;d like to see best practice module development guides front and centre on the Forge. Lots of modules won&#8217;t work with other modules and I think that&#8217;s fixable.</li>
	<li>Integration with puppet-lint would be nice, giving some indication of whether the authors care about the Puppet styleguide.</li>
	<li><del>A command line search interface would be useful</del>. And <a href="http://docs.puppetlabs.com/man/module.html">turns out to exist</a>. Thanks <a href="http://twitter.com/a1cy">@a1cy</a> for the heads up.</li>
	<li>The Forge tracks number of downloads, but as a publisher I don&#8217;t know how often my modules have been downloaded.</li>
	<li>And finally I&#8217;d like to see more people using it.</li>
</ul>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shipping]]></title>
    <link href="http://www.morethanseven.net/2012/10/21/shipping/"/>
    <updated>2012-10-21T21:50:00-07:00</updated>
    <id>http://www.morethanseven.net/2012/10/21/shipping</id>
    <content type="html"><![CDATA[<p>Last week we shipped <a href="https://www.gov.uk"><span class="caps">GOV</span>.UK</a>. Over the last year we&#8217;ve built a team to build a website. Now we&#8217;re busy building a culture too. I&#8217;ve got so much that needs writing up about everything we&#8217;ve been up to. Hopefully I&#8217;ll make a start in the next week or so.</p>]]></content>
  </entry>
  
</feed>
