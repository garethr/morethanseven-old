<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ant | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/ant/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2013-12-26T18:51:05+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ant for Web Developers II - Restart Apache]]></title>
    <link href="http://www.morethanseven.net/2009/06/23/ant-web-developers-ii-restart-apache/"/>
    <updated>2009-06-23T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2009/06/23/ant-web-developers-ii-restart-apache</id>
    <content type="html"><![CDATA[<p>Following on from "yesterdays first useful ant task":http://morethanseven.net/2009/06/22/ant-web-developers-i-backup-config-file/, here's another commonly used task - restarting a remote service. I've used apache in this example, but it could be any service running on your remote machine and it doesn't have to be the restart command.</p>

<p>In order to do this we'll use the "sshexec target":http://ant.apache.org/manual/OptionalTasks/sshexec.html which has a third party "library dependency":http://ant.apache.org/manual/install.html#librarydependencies. This is the same third party library needed for the scp task in yesterdays post</p>

<p>You need first to download "JSCH":http://www.jcraft.com/jsch/index.html and then compile the source using ant. Just run <em>ant dist</em> in the downloaded folder and you should get a .jar file in the /dist/lib folder. Save this .jar file as as jsch.jar to a folder in your home directory <em>~/.ant/lib</em> where ant can automatically load it. Alternatively you can run ant with the -lib command to load libraries from a different location.</p>

<p>pre. ant -lib /tools/ant-libraries</p>

<p>With that out of the way lets have a look at the task.</p>

<p>pre. &lt;?xml version="1.0" encoding="UTF-8"?>
<project name="example" basedir=".">
<property name="host" value="{host}"/>
<property name="username" value="{user}"/>
<property name="password" value="{password}"/>
<target name="restart-apache" description="execute a remote command to restart apache"></p>

<pre><code>    &lt;sshexec host="${host}"
        username="${username}"
        password="${password}"
        command="/etc/init.d/apache2 restart"/&gt;
</code></pre>

<p></target>
</project></p>

<p>And running it is as simple as:</p>

<p>pre. ant restart-apache</p>

<p>One potential issue with tasks like this is storing the password in the build file in plain text. The target we're using can also use key authentication is you're happy using ssh keys. Alternatively you can set properties on the command line each time you run ant like so.</p>

<p>pre. ant restart-apache -Dpassword={password}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ant for Web Developers I - Backup Config File]]></title>
    <link href="http://www.morethanseven.net/2009/06/22/ant-web-developers-i-backup-config-file/"/>
    <updated>2009-06-22T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2009/06/22/ant-web-developers-i-backup-config-file</id>
    <content type="html"><![CDATA[<p>I occasionally get "carried away":http://morethanseven.net/2009/01/24/defence-apache-ant/ with "Apache Ant":http://ant.apache.org/. For those that haven't come across it, Ant is a build tool written in Java, using an XML syntax to describe a series of repeatable tasks. In your typical web standards savvy, dynamic language favouring, web developer types that description is probably all they (think they) need to know. It's Java. It's XML. It's only really useful in the context of building software (dull).</p>

<p>But I think Ant is a particularly handy tool to have around for anyone working on even simple websites. A couple of strong use cases come to mind:</p>

<ul>
<li>If you're working in a team environment then build files are hugely useful when introducing new people to the team, or when moving people around. Getting code up and running at the start of a project, or if you join the team part way through, can be tricky. A well written build file can automate this.</li>
<li>Even when working on projects on my own I tend to write simple build files. The main reason is so I don't forget how to do something. How do you deploy this particular site? How do you run the test suite or generate the documentation? Build files can encapsulate this, and rather than documentation that might be out of date the build file will be executed to do that job in question.</li>
</ul>


<p>So with all that in mind I'm going to try and do a series of posts each covering a single task, aiming to cover things that your regular web developer will find useful. With that in mind if anyone has any requests or questions let me know either by email or in the comments.</p>

<p>Out first task lets us backup a file from our remote web server, in this case it's the apache2.conf file used to setup apache. Obviously it could be any file you want to get hold of. The example below has a couple of properties for the username and hostname of the remote machine. Save the following snippet into a file called build.xml and place it anywhere you like on your machine.</p>

<p>pre. &lt;?xml version="1.0" encoding="UTF-8"?>
<project name="example" basedir=".">
<property name="username" value="{user}"/>
<property name="host" value="{host}"/>
<target name="backup-apacheconf" description="backup apache2.conf file from a remote server">
  <exec executable="scp" dir="." failonerror="true"></p>

<pre><code>&lt;arg value="${username}@${host}:/etc/apache2/apache2.conf"/&gt;
&lt;arg value="apache2.conf"/&gt;
</code></pre>

<p>  </exec>
</target>
</project></p>

<p>Running the task, once you have ant installed (it comes already installed on OS X and is generally available in whatever linux package management system you prefer), is as simple as typing the following into a console.</p>

<p>pre. ant backup-apacheconf</p>

<p>This should download the apache2.conf file to you local machine, into the same directory as your build file.</p>

<p>The above task requires that you have scp installed on your machine, which is pretty likely if you're using OS X or Linux. Ant comes with an inbuilt <em>scp</em> task, but it requires you to install a separate java library. If you're happy doing that then you can write tasks like:</p>

<p>pre. &lt;?xml version="1.0" encoding="UTF-8"?>
<project name="example" basedir=".">
<property name="username" value="{user}"/>
<property name="password" value="{password}"/>
<target name="backup-apacheconf" description="backup apache2.conf file from a remote server"></p>

<pre><code>&lt;scp file="${username}@${host}:/etc/apache2/apache2.conf" todir="." password="${password}"/&gt;
</code></pre>

<p></target>
</project></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Epydoc Ant task]]></title>
    <link href="http://www.morethanseven.net/2009/02/23/epydoc-ant-task/"/>
    <updated>2009-02-23T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/02/23/epydoc-ant-task</id>
    <content type="html"><![CDATA[<p>I quite like "Epydoc":http://epydoc.sourceforge.net/ for generating Python API documentation, even if the interface looks a little dated and could do with a lick of paint.</p>

<p>For most project I use an Ant build script to generate documentation when needed. You could wrap the basic commands in a make file or a bash script if you prefer that sort of thing though. The only trick is to make sure you have everything you need on your Python Path. In Django projects, or App Engine projects, you'll probably find the default runner script plays with the path somewhat. The following example adds the current directory to the path along with an ext directory where I stash external modules, which should see it run cleanly without any import errors.</p>

<p>pre. <project name="secretproject" default="create-api"></p>

<pre><code>&lt;property name="name" value="secretproject"/&gt;
&lt;property name="parent" value="/www/projects"/&gt;
&lt;property name="api" value="/www/project/secretproject/api"/&gt;
&lt;target name="create-api" description="Generate API documentation with epydoc"&gt;
     &lt;exec executable="/bin/sh"&gt;
         &lt;env key="PYTHONPATH" value="${parent}:${parent}/${name}/ext:$PYTHONPATH"/&gt;
         &lt;env key="DJANGO_SETTINGS_MODULE" value="${name}.settings"/&gt;
         &lt;arg line="-c 'epydoc --html -o ${api} --name ${name} --graph all ${name}'"/&gt;
     &lt;/exec&gt;
&lt;/target&gt;
</code></pre>

<p></project></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Defence of Apache Ant]]></title>
    <link href="http://www.morethanseven.net/2009/01/24/defence-apache-ant/"/>
    <updated>2009-01-24T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/01/24/defence-apache-ant</id>
    <content type="html"><![CDATA[<p>I'm a big fan of the "Ant":http://ant.apache.org/ build tool. Their I said it. Nearly everyone else I end up talking to about build scripts (more people that you'd think, but OK, it's hardly the most exciting topic of conversation) either hates it or treats it with disdain.</p>

<p>I've been using it for a few years on and off, in several jobs and for personal projects as well. I've used it while writing Python, .NET and PHP. It might be somewhat unfashionable (it's written in Java and you write your commands in XML) but, for me at least, it's incredibly handy to have around.</p>

<p>Ant is a build tool. It lets you define tasks in a config file (called build.xml) and then execute them via running the <em>ant</em> command line application. It supports dependencies between tasks as well as defining properties that can be used by multiple tasks. It supports a lot of Java specific stuff as well but also has the ability to simply execute commands on the host OS.</p>

<p>As a really simple example of a few tasks I use on more than one project involve simple backups and deployment.</p>

<p>First I set up a few properties including details of where my site files live and the SSH access details for the remote site.</p>

<p>pre. <property name="username" value=""/>
<property name="host" value=""/>
<property name="dir" value=""/></p>

<p>The first example task simply runs a backup of everything in the target directory using scp.</p>

<p>pre. <target name="backup" description="backup site" >
   <exec executable="scp" dir="." failonerror="true"></p>

<pre><code>  &lt;arg value="-r"/&gt;
  &lt;arg value="${username}@${host}:${dir}"/&gt;
  &lt;arg value="backups/${TODAY_UK}"/&gt;
</code></pre>

<p>   </exec>
</target></p>

<p>If I make local changes and want to push them to the live site I have another simple task which shells out to rsync.</p>

<p>pre. <target name="deploy" description="deploy usng rsync" >
  <exec executable="rsync" dir="." failonerror="true"></p>

<pre><code>  &lt;arg value="-r"/&gt;
  &lt;arg value="."/&gt;
  &lt;arg value="${username}@${host}:${dir}"/&gt;
  &lt;arg value="--exclude-from=rsync.excludes"/&gt;
  &lt;arg value="-v"/&gt;
</code></pre>

<p>  </exec>
</target></p>

<p>I know "some people":http://simonwillison.net hate this separate arguments as individual elements. Yes it's excessively XML but it makes everything incredibly clear to anyone who might sneak a look. And build scripts change little compared to project code so the verbosity never bothers me overly. If you really want you can put everything on one line, but I find that harder to follow and maintain.</p>

<p>pre. <target name="deploy" description="deploy usng rsync" >
  <exec executable="rsync" dir="." failonerror="true"></p>

<pre><code>  &lt;arg line="-r . "${username}@${host}:${dir} --exclude-from=rsync.excludes -v"/&gt;
</code></pre>

<p>  </exec>
</target></p>

<p>For bigger projects I tend to create more complex backup and deployment tasks, or more often than not add in various dependencies. But you hopefully get the idea. Even for simple commands like this that would be a single line bash script I tend to use ant. I find by putting things together into a build script I'm more likely to add useful functionality to it later, and to remember and therefore run the commands more often.</p>

<p>A good reference for finding out more than is in the "manual":http://ant.apache.org/manual/index.html is the "Apache Ant Wiki":http://wiki.apache.org/ant/FrontPage. More than anything it features real examples that you can learn from which with Ant is definitely the best way to discover new tricks.</p>

<p>I know their are a number of other tools in languages I like more. On occasion I use "Rake":http://rake.rubyforge.org/, "Fabric":http://savannah.nongnu.org/projects/fab and "Capistrano":http://www.capify.org/. I've looked at "Vellum":http://www.zedshaw.com/projects/vellum/ and good old make. I know others who swear by just writing simple bash scripts or using straight Ruby, PHP or Python (or not writing build scripts at all and doing everything by hand. But I like having my build scripts separate and simple. It might not be pretty or fashionable, but Ant does almost perfectly what I want it to do.</p>
]]></content>
  </entry>
  
</feed>
