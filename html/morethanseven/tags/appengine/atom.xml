<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: appengine | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/appengine/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-02-05T17:10:02+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker Posts]]></title>
    <link href="http://www.morethanseven.net/2009/03/21/hacker-posts/"/>
    <updated>2009-03-21T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/03/21/hacker-posts</id>
    <content type="html"><![CDATA[<p>I've been playing again with App Engine, and going back to an on/off pet project that I've build variations of for a while.</p>

<p><a href="http://hackerposts.appspot.com"><img src="http://image-host.appspot.com/i/img?id=agppbWFnZS1ob3N0cgwLEgVJbWFnZRihHww" alt="Hacker Posts"/></a></p>

<p>It's basically a pretty straightforward aggregation platform, taking content from a number of feeds and creating relationships between the items. It's mainly an experiment in creating a decent size site on App Engine - it can be surprising how many urls you can get out of a good corpus of data:</p>

<ul>
<li>400 items, each with a unique url</li>
<li>each item has a variable number of tags generated, at the moment that amounts to about 1000 unique urls</li>
<li>each month and year of content gets a url so that's another 4 or so</li>
<li>each day for which we have items we also get a url, so that's another 90 or so</li>
</ul>


<p>So starting off with 1500 or so pages isn't bad. The site also grows over time as new items are posted or I add more feeds. Everything else I've done with App Engine has been more "application":http://imified-demo.appspot.com/ "focused":http://image-host.appspot.com/ so seeing how a content site performs is interesting in and of itself.</p>

<p>The data in question I used for this first experiment was the feeds I could find from the "top posters on Hacker News":http://news.ycombinator.com/leaders. Hence the name "Hacker Posts":http://hackerposts.appspot.com. That left me with 35 feeds:</p>

<ul>
<li>http://www.matasano.com/log/feed/</li>
<li>http://feeds2.feedburner.com/ThinkGene</li>
<li>http://www.mechanicalrobotfish.com/rss.xml</li>
<li>http://feeds.feedburner.com/Cloudknow</li>
<li>http://mark.nirv.net/rss</li>
<li>http://feeds.feedburner.com/seldomlogical</li>
<li>http://feeds.feedburner.com/mattmaroon/AAcm</li>
<li>http://www.swombat.com/rss.xml</li>
<li>http://feeds.feedburner.com/woobius</li>
<li>http://feeds2.feedburner.com/danieltenner</li>
<li>http://www.nilkanth.com/feed/</li>
<li>http://feeds.feedburner.com/NewCartographer</li>
<li>http://inthebox.webmin.com/feed</li>
<li>http://www.maximise.dk/blog/xml/rss.xml</li>
<li>http://www.pchristensen.com/blog/feed/</li>
<li>http://280north.com/blog/feed/</li>
<li>http://tlrobinson.net/blog/feed/</li>
<li>http://www.WhatToFix.com/atom.xml</li>
<li>http://alexkrupp.typepad.com/sensemaking/atom.xml</li>
<li>http://feeds.feedburner.com/yegg</li>
<li>http://scotchi.net/feed/atom/</li>
<li>http://paulbuchheit.blogspot.com/feeds/posts/default</li>
<li>http://www.owenbyrne.com/feed/</li>
<li>http://blog.jrock.us/feeds/articles/atom</li>
<li>http://www.kalzumeus.com/feed/</li>
<li>http://feeds.feedburner.com/gojomo</li>
<li>http://davidpiccione.com/blog/feed/</li>
<li>http://blog.blinker.net/feed/</li>
<li>http://dambalah.com/feed/</li>
<li>http://dustincurtis.com/rss.xml</li>
<li>http://blog.jodoro.com/feeds/posts/default</li>
<li>http://arantaday.com/blog/feed/</li>
<li>http://www.allanjosephbatac.com/blog/feed</li>
<li>http://feeds.feedburner.com/offbytwo</li>
<li>http://feeds.feedburner.com/FoundersBlog-Cluttermecom</li>
</ul>


<p>I have a couple of other communities or events that I'd like to do the same thing around, as well as a few features I want to add to the underlying software. The nice thing with App Engine is rolling new instances out is as simple as running a command.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webapp custom filters]]></title>
    <link href="http://www.morethanseven.net/2009/03/19/webapp-custom-filters/"/>
    <updated>2009-03-19T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/03/19/webapp-custom-filters</id>
    <content type="html"><![CDATA[<p>The webapp framework wish ships with App Engine uses the Django templating system by default, but without Django apps doesn't support the same mechanism for loading template tags and filters. "This is how to do it though":http://javawonders.blogspot.com/2009/01/google-app-engine-templates-and-custom.html using a few webapp.template methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XMPP and Queues in App Engine via Jaiku? Not quite yet]]></title>
    <link href="http://www.morethanseven.net/2009/03/14/xmpp-and-queues-app-engine-jaiku-not-quite-yet/"/>
    <updated>2009-03-14T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/03/14/xmpp-and-queues-app-engine-jaiku-not-quite-yet</id>
    <content type="html"><![CDATA[<p>So "JauikuEngine":http://code.google.com/p/jaikuengine, the open source, App Engine based, version of Jaiku is now available for everyone to look at. I "found the repo a couple of days ago":http://twitter.com/garethr/status/1321372099 but it was restricted to project members. The main reason I want to hunt through the code is to have a look at what I'm guessing will be API's available in a soon to be released version of App Engine - with specific interest in anything to do with XMPP, queues and offline processing.</p>

<p>Well it looks like I'm out of luck for the moment at least. In the "settings file":http://code.google.com/p/jaikuengine/source/browse/trunk/settings.py I found the following two snippets though:</p>

<p>pre. #</p>

<h1>XMPP / IM</h1>

<p>#</p>

<h1>Enabling IM will require a bit more than just making this True, please</h1>

<h1>read the docs at http://code.google.com/p/jaikuengine/wiki/im_support</h1>

<p>IM_ENABLED = False</p>

<h1>This is the id (JID) of the IM bot that you will use to communicate with</h1>

<h1>users of the IM interface</h1>

<p>IM_BOT = 'root@example.com'</p>

<h1>Turn on test mode for IM</h1>

<p>IM_TEST_ONLY = False</p>

<h1>JIDs to allow when testing live XMPP so you don't spam all your users</h1>

<p>IM_TEST_JIDS = []</p>

<p>And another for queues:</p>

<p>pre. #</p>

<h1>Task Queue</h1>

<p>#</p>

<h1>Enabling the queue will allow you to process posts with larger numbers</h1>

<h1>of followers but will require you to set up a cron job that will continuously</h1>

<h1>ping a special url to make sure the queue gets processed</h1>

<p>QUEUE_ENABLED = True</p>

<h1>The secret to use for your cron job that processes your queue</h1>

<p>QUEUE_VENDOR_SECRET = 'SECRET'</p>

<p>The only problem appears to be that the page referenced, "code.google.com/p/jaikuengine/wiki/im_support":http://code.google.com/p/jaikuengine/wiki/im_support, currently says:</p>

<p>bq. TODO(termie): describe how to get IM working with Jaiku Engine</p>

<p>So "termie":http://twitter.com/termie, or anyone else on the inside, I'd love to know how to get this up and running?</p>

<p>I'll be having a better look through the code when I get a chance. This was just the first thing I jumped on before heading out the door. I love Open Source.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Engine Remote API calls]]></title>
    <link href="http://www.morethanseven.net/2009/03/13/app-engine-remote-api-calls/"/>
    <updated>2009-03-13T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/03/13/app-engine-remote-api-calls</id>
    <content type="html"><![CDATA[<p>Not sure how I missed this but apparently App Engine (as of 1.1.9) supports "remote access to your live data store":http://code.google.com/appengine/articles/remote_api.html. This means you can create administration applications more easily by running them locally, rather than within the limitations of the live platform. You can even run a local python prompt with access to your live datastore which is pretty neat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Example of using XMPP on App Engine (via IMified)]]></title>
    <link href="http://www.morethanseven.net/2009/02/21/example-using-xmpp-app-engine-imified/"/>
    <updated>2009-02-21T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/02/21/example-using-xmpp-app-engine-imified</id>
    <content type="html"><![CDATA[<p>As I "mentioned before":http://morethanseven.net/2009/02/07/xmpp-and-offline-processing-coming-google-app-engi/, App Engine is getting an XMPP API at some point soon. But if you just can't wait to start adding IM interfaces to your applications then you <em>can</em> do it now, by using a nifty third party in "IMified":http://imified.com/.</p>

<p>IMified provide an incredibly simple HTTP API for interacting with your own IM bot. If we want to be buzz word compliant we might even call it a "webhook":http://webhooks.pbwiki.com. It's also currently a free service while they work through the beta. The "documentation":http://new.imified.com/developers/api is short and to the point but only contains examples in PHP. It supports multiple step <em>conversations</em> as well as authentication.</p>

<p>So, armed with a little time on the train over the last few days I got to work knocking together a quick demo application as a proof of concept. You can find the site on "imified-demo.appspot.com":http://imified-demo.appspot.com/ and if you want to chat with the bot you can add <em>appengineimified@bot.im</em> to your contacts. The bot uses the Jabber protocol so is available over Jabber or GTalk. IMified make it easy to use MSN or Yahoo IM accounts as well, which is something the App Engine API might very well not do I would imagine.</p>

<p><img src="http://image-host.appspot.com/i/img?id=agppbWFnZS1ob3N0cgwLEgVJbWFnZRjRDww" alt="Screengrab of the IMified App Engine site"/></p>

<p>As always you can find the code on "GitHub":http://github.com/garethr/appengine-imified/tree/master. Most of the code is actually just the site itself or settings to make local development easier. The following is a slightly edited version of the live code (logging and caching removed to make it easier to follow). All we need to do is accept a HTTP Post request with a list of arguments and return a plain text response. All being well the response is sent as a IM message to the sender.</p>

<p>pre. class IMified(webapp.RequestHandler):</p>

<pre><code>"This is the endpoint for the message from IMified"
def post(self):
    "We recieve post data from IMified"
    userkey = self.request.get('userkey')
    network = self.request.get('network')
    msg = self.request.get('msg')
    step = self.request.get('step')
    try:
        # we try and create the message
        message = Message(
            userkey = userkey,
            network = network,
            msg = msg,
            step = int(step)
        )   
        message.put()
        # the response is send as an IM message to the sender
        self.response.out.write('Message saved')
    except:
        self.response.out.write('An error ocured, message not saved')
</code></pre>

<p>IMified can obviously be used outside App Engine as well, and in fact it's not just about working around limitations in existing systems. Running the long running processes required for bots, and potentially even running your own XMPP server, is fiddly at times and requires at least some setup, monitoring and configuration to get working. Not having that as a barrier for entry for simple experiments or applications is a good thing.</p>

<p>"Aral":http://aralbalkan.com/ spoke at the last "DJUGL":http://groups.google.com/group/django-london about App Engine and mentioned a wide range of third party services that you can use to get around current limitations. IMified definitely fits into this group of support services very nicely indeed. I'd love to see them do really well as it really makes it much easier to get started with XMPP applications, even if what you can do is limited to a few simple APIs. I'd love to hear about other services that people are using in this way to build these distributed applications.</p>
]]></content>
  </entry>
  
</feed>
