<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/chef/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-02-05T17:24:35+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talking Configuration Management, Vagrant And Chef At Lrug]]></title>
    <link href="http://www.morethanseven.net/2011/08/11/Talking-configuration-management-vagrant-and-chef-at-lrug/"/>
    <updated>2011-08-11T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2011/08/11/Talking-configuration-management-vagrant-and-chef-at-lrug</id>
    <content type="html"><![CDATA[<p>I stepped in at the last minute to do a talk at the last London Ruby User Group. From the feedback afterwards folks seemed to enyoy it and I certainly had fun. Thanks to everyone who came along.</p>

<object id="__sse8828889" width="595" height="497"> <param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=configmanagamentfordevelopmentenvironmentsii-110811103611-phpapp02&rel=0&stripped_title=config-managament-for-development-environments-ii&userName=garethr" /> <param name="allowFullScreen" value="true"/> <param name="allowScriptAccess" value="always"/> <embed name="__sse8828889" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=configmanagamentfordevelopmentenvironmentsii-110811103611-phpapp02&rel=0&stripped_title=config-managament-for-development-environments-ii&userName=garethr" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="595" height="497"></embed> </object>


<p>As well as the slides the nice Skills Matter folks have already uploaded the "videos from the night":http://skillsmatter.com/podcast/home/chef-vagrant.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Version Control And Deployment Of Cron Jobs]]></title>
    <link href="http://www.morethanseven.net/2011/05/07/Version-control-and-deployment-of-cron-jobs/"/>
    <updated>2011-05-07T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2011/05/07/Version-control-and-deployment-of-cron-jobs</id>
    <content type="html"><![CDATA[<p>A recent question on Twitter prompted me to write a quick blog post about managing cron jobs. As more and more people want to automate provisioning and deployment of web applications some, maybe previously manually managed, items come into the fold.</p>

<p>Cron jobs are interesting because you may prefer to see them as part of the infrastructure (like apache or mysql) or as part of your application code. I think both are valid, sometimes at the same time. For instance you might have a cron job which deals with scheduled database backups. All that requires is the database and the script to be present. At other times your cron jobs might require your entire application stack. For instance a rake task which uses a Rails application model, or a django management command.</p>

<p>h2. Configuration Management and Cron</p>

<p>Both "Chef":http://opscode.com/chef/ and "Puppet":http://puppetlabs.com/puppet/ provide a cron resource type. This is particularly handy for things like database backup scripts or ganglia gmetric scripts. You probably want these scripts and cron jobs to be installed on machines that have the related software installed, and you're probably already describing this in your Chef recipes or Puppet manifests. If you're not already using one of these tools using them to manage just your cron jobs is a nice way of starting out.</p>

<p>Using the "Puppet Cron Type":http://docs.puppetlabs.com/references/latest/type.html#cron looks like this:</p>

<pre><code>cron { command:
  command => "/usr/local/sbin/command",
  hour => 2,
  minute => 0
}</code></pre>


<p>And the equivalent "Chef Reasource":http://wiki.opscode.com/display/chef/Resources#Resources-Cron looks like:</p>

<pre><code>cron "describe your job" do
  hour "2"
  minute "0"
  command "/usr/local/sbin/command"
end</code></pre>


<p>The important part is that by describing your cron jobs in code you can then version control them easily, and both Chef and Puppet have mechanisms to push these jobs out to be installed by the relevant hosts. With cron jobs you might not want all your machines to be running the same jobs for instance.</p>

<p>h2. Using Whenever</p>

<p>An alternative, or complimentary, approach to versioning and deploying cron jobs would be to tie it in with your application code. This makes sense when those jobs are tightly coupled to your application, for instance rails specific rake tasks or django management commands. "Whenever":https://github.com/javan/whenever is a tool I've been using recently that makes this pretty simple. You describe your cron jobs in a file called schedule.rb like so:</p>

<pre><code>every 3.hours do
  command "/usr/local/sbin/command"
end</code></pre>


<p>And then running the provided whenever command line application will generate a working crontab. Whenever ships with capistrano integration and some useful shortcuts for running rake tasks or accessing Ruby code, but it's simple to write your own command shortcuts without having to write ruby code too.</p>

<p>h2. Other Approaches</p>

<p>I have seen some tools which replace cron completely, but I've never liked that idea much. Cron works pretty well, and is clever enough to deal with things like daylight saving time and leap years inteligently if needed. I know other folks who are centralising all regular jobs into something like Jenkins. I can see advantages to that, although I've yet to find a really nice way of automating this outside the gui interface or manually modifying configuration files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuration Management For Development Environments]]></title>
    <link href="http://www.morethanseven.net/2011/02/08/Configuration-management-for-development-environments/"/>
    <updated>2011-02-08T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2011/02/08/Configuration-management-for-development-environments</id>
    <content type="html"><![CDATA[<p>I had the pleasure of speaking at "Fosdem":http://www.fosdem.org/2011/ last weekend to a packed "Configuration amd systems management devroom":http://www.fosdem.org/2011/schedule/track/configuration_systems_management_devroom.</p>

<p>My presentation covered some of the same ground as recent blog posts, namely why you should be using virtualisation and config management tools to manage your local development environment.</p>

<object id="__sse6836888" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=configmanagamentfordevelopmentenvironments-110207033122-phpapp02&stripped_title=config-managament-for-development-environments-6836888&userName=garethr" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed name="__sse6836888" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=configmanagamentfordevelopmentenvironments-110207033122-phpapp02&stripped_title=config-managament-for-development-environments-6836888&userName=garethr" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object>


<p>People even said "nice things":http://twitter.com/#!/unixdaemon/status/34209307390124033 about it:</p>

<p>bq. @garethr basically has this subject completely covered. He's even advocating the correct editor. excellent #fosdem talk</p>

<p>All in all another good event, I have notes about some of the other talks I went along to that I'll try write up soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Default Recipes For Vagrant Virtual Machines]]></title>
    <link href="http://www.morethanseven.net/2011/01/10/My-default-recipes-for-vagrant-virtual-machines/"/>
    <updated>2011-01-10T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2011/01/10/My-default-recipes-for-vagrant-virtual-machines</id>
    <content type="html"><![CDATA[<p>I've written about "Vagrant previously":http://morethanseven.net/2010/11/04/Why-you-should-be-using-virtualisation.html and the more I use it the more it impresses me and the more it changes how I work. For those that haven't yet used "vagrant":http://vagrantup.com the brief summary is, it's a way of managing, creating and destroying headless virtualbox virtual machines. So when I'm sat at my computer and I want a new 32 bit virtual machine based on Maverick I just type.</p>

<pre>vagrant init maverick32
vagrant up</pre>


<p>It has some other magic tricks as well, like automatically setting up NFS shares between the host and guest and allowing you to specify ports to forward in the configuration file. You access the machine via ssh, either using the handy <em>vagrant ssh</em> command or by using <em>vagrant ssh-config</em> to dump the relevant configuration to place in ~/.ssh/config.</p>

<p>I've been using virtualisation for a few years, initially purely for testing and experimentation, and then eventually for all my development. I'd have a few VMware images, I'd use snapshots and occasionally rollback, but I very rarely created new virtual machines. It was quite a manual process. With vagrant that's changing. Everytime I start investigating a new tool or new technology or work on a pet project I create a new virtual machine. That way I know exactly what I'm dealing with, and with vagrant the cost of doing that is the 30s waiting for the new machine to boot.</p>

<p>Or rather it would be if I didn't then have to install and configure the same few things on every machine. Pretty much whatever I might be doing I found myself installing the same things, namely zsh, vim, git and utils like ack, wget, curl and lynx. This is exactly what the provisioning support in vagrant is for, so I set out to use chef to do this for me.</p>

<p>I decided to use a remote tar file for the recipes. I'm not really bothered about managing a chef server just for my personal virtual machines, but I did want to have a canonical source of the cookbooks that wasn't local to just one of my machines. Plus this means anyone else who shares my opinions about what you want on a new virtual machine can use them too.</p>

<p>My Vagrantfile now looks like this:</p>

<pre>Vagrant::Config.run do |config|
  config.vm.box = "maverick32"
  config.vm.provisioner = :chef_solo
  config.chef.recipe_url = "http://cloud.github.com/downloads/garethr/chef-repo/cookbooks.tar.gz"
  config.chef.add_recipe "garethr"
  config.chef.cookbooks_path = [:vm, "cookbooks"]
  config.chef.json.merge!({ :garethr => {
      :ohmyzsh => "https://github.com/garethr/oh-my-zsh.git",
      :dotvim => "https://github.com/garethr/dotvim.git"
    }})
end</pre>


<p>You can see the cookbook on GitHub at "github.com/garethr/chef-repo":https://github.com/garethr/chef-repo/. By default it uses the "official oh-my-zsh repo":https://github.com/robbyrussell/oh-my-zsh.git and the "vim configuration from jtimberman":https://github.com/jtimberman/dotvim.git. My own versions are very minor personal preference modifications of those. The Vagrantfile example above shows how you can override the defaults and use your own configs instead if you choose.</p>

<p>One question I was asked about this approach was why I didn't just create a basebox with all these things installed by default, this would reduce the time taken on first boot as software wouldn't have to be installed each time. However it would also mean maintaining the basebox's myself, and as I use different Linux distributions or versions this would be a headache. While doing this and working with vagrant I've been thinking about the ecosystem around the tool and I'm planning on writing my thoughts on that subject over the next week or so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef Hello World]]></title>
    <link href="http://www.morethanseven.net/2010/10/30/Chef-hello-world/"/>
    <updated>2010-10-30T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2010/10/30/Chef-hello-world</id>
    <content type="html"><![CDATA[<p>I've been playing with Chef recently, in particular the solo variant. The new job at FreeAgent meant setting up new development virtual machines and rather than just jot down instructions I decided to script everything. I'd been wanting an excuse to take a look at Chef for a while and it's certainly suited to this sort of job.</p>

<p>Unfortunately the <em>getting started</em> documentation isn't yet great. I'm pretty sure this will improve over time, I had exactly the same problem with the Puppet docs a year ago. The main problem I had was I wanted to know how to use it, not just how to download someone elses cookbook. What I wanted was the following, the absolute simplest thing that will work. A Hello World example for Chef if you will. I'll say now that I'm not an expert, their may be ways of doing this that are even simpler, but this works for me. And before someone mentions knife or rake tasks a generator isn't simpler. It might be better when you know what's going on but until you do it's a big ass abstraction that will just get in the way.</p>

<p>All my sample cookbook is going to do is install a single package, curl. I'm going to assume you have chef installed for this already. The documentation did an OK job of that, although I'm relativly familiar with installing gems. I did find that the default system packages on Ubuntu at least were way out of date. Either get the packages direct from opscode or use the gem.</p>

<p>First create a directory and file structure that looks like this:</p>

<pre>
-- config
   -- node.json
   -- solo.rb
-- cookbooks
   -- example
      -- recipes
         -- default.rb
</pre>


<p>When you run the chef-solo command you need to tell it a few bits of information. The minimum appears to be just telling it where to find the cookbook we're going to create. I think you can call this file anything you like but in the tree above it's called solo.rb.</p>

<pre>cookbook_path File.expand_path(File.join(File.dirname(__FILE__), '..', "    cookbooks"))</pre>


<p>Next up is the details of the given node. This in our very simple case is just a list of the recipes we want to run when we execure chef-solo. Put the following content in the node.json file in the config directory as indicated above:</p>

<pre>{
  "run_list": [ "recipe[example]" ]
}</pre>


<p>Last up we want to create a cookbook. Now you can go and download example cookbooks from all over the place. This is great for learning new tricks and commands but for me at least to begin with most of them were more complicated than I needed for my simple usecase. Lots of options. Lots of knowing the package names on different distros. I'm just calling this cookbook <em>example</em>. That means the folder in the cookbooks folder is called example and the run list above references example. Feel free to change this to whatever you like, or create new cookbooks with different names. Inside that folder we create a recipes folder and inside that we create a default.rb file with the following content.</p>

<pre>package "curl"</pre>


<p>And that's it. A bigish directory structure, three files, each with about one line of content. Simple.</p>

<p>Now to run all that just issue the following command:</p>

<pre>sudo chef-solo -c config/solo.rb -j config/node.json</pre>


<p>This should output various messages to the console about what chef is doing and, when it's finished, you should find curl has been installed. Try and add another line to the recipe for another package (or even a gem) and rerun the chef-solo command. Now go read the docs for all the other cool things you can do.</p>
]]></content>
  </entry>
  
</feed>
