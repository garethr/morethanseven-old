<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/javascript/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-02-05T17:10:02+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Talking To Jenkins From Campfire With Hubot]]></title>
    <link href="http://www.morethanseven.net/2012/01/06/Talking-to-jenkins-from-campfire-with-hubot/"/>
    <updated>2012-01-06T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2012/01/06/Talking-to-jenkins-from-campfire-with-hubot</id>
    <content type="html"><![CDATA[<p>In what turned out to be a productive holiday hacking with languages I'd not used before, I got round to writing some coffeescript on node.js. This was more to do with scratching a personal itch that pure experimentation. I had a play with "Janky":https://github.com/github/janky (Github's Jenkins/Hubot mashup) but found it a little opinionated on the Jenkins side, but the campfire integration is excellent. Looking at the Jenkins commands in "hubot-scripts":https://github.com/github/hubot-scripts/ though I found those even more opinionated.</p>

<p>The magic of open source though is you can just fix things, then ask nice people if they like what you've done. I set about writing a few more general commands and lo, the've been quickly "merged upstream":https://github.com/github/hubot-scripts/pull/23840h.</p>

<p>These add:</p>

<ul>
<li>A command to list all your Jenkins jobs and the current state</li>
<li>A command to trigger a normal build</li>
<li>A command to trigger a build with a list of parameters</li>
</ul>


<p><img src="http://image-host.appspot.com/i/img?id=agppbWFnZS1ob3N0cg0LEgVJbWFnZRipwAIM" alt="campfire window showing jenkins tasks"/></p>

<p>This was made much easier by first looking at the previous Jenkins commands, and then looking at other scripts in the hubot-scripts repository. The best way of learning a new language/framework is still on the shoulders of others.</p>

<p>I've got a few other good ideas for Jenkins related commands. I want to add a filter command to the jobs list, both by name and by current state. For longer running jobs I also want to report whether a build is currently running. And then maybe get information about a specific job, like the last few runs or similar. Any other requests or ideas most welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript In Your Ruby: Mongoid Map Reduce]]></title>
    <link href="http://www.morethanseven.net/2011/10/10/Javascript-in-your-ruby-mongoid-map-reduce/"/>
    <updated>2011-10-10T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2011/10/10/Javascript-in-your-ruby-mongoid-map-reduce</id>
    <content type="html"><![CDATA[<p>We're pretty fond of "Mongodb":http://mongodb.org/ at work and I've been getting an opportunity to kick some of the more interesting tyres recently. I thought I'd document something I found myself doing here, half hoping it might be useful for anyone else with a similar problem and also to see if anyone else has a much neater approach. The examples are obviously pretty trivial, but hopefully you get the idea.</p>

<p>So, we're making using of the rather nice "Mongoid":http://mongoid.org/ Ruby library for defining our models as Ruby classes. Here's a couple of very simple classes. Anyone familiar with DataMapper or Django's ORM should be right at home here.</p>

<pre>class Publication
  include Mongoid::Document

  field :name,            :type => String
  field :section,         :type => String
  field :body,            :type => String
  field :is_published,    :type => Boolean
end

class LongerPublication < Publication
  field :extra_body,      :type => String
end
</pre>


<p>So we now have a good few publications and longer publications in our system. And folks have been creating sections with wild amandon. What I'd like to do now is do some reporting, specifically I want to know the numbers of Publications by type and publication status. And lets allow a breakdown by section while we're at it.</p>

<p>One approach to this is using Mongo's built in map-reduce capability. Mongoid exposes this pretty cleanly in my view, by allowing you to write the required javascript functions (a mapper and a reducer) inline in the Ruby code. This might feel evil, but seems the best of the available options. I can see for much larger functions that splitting this out into separate javascript files for ease of testing might be nice, but were you can just test the input/output of the whole job this works for me.</p>

<pre>KLASS = "this._type"
SECTION = "this.section"

def self.count_by(type)
  map = <<EOF
    function() {
      function truthy(value) {
        return (value == true) ? 1 : 0;
      }
      emit(#{type}, {type: #{type}, count: 1, published: truthy(this.is_published)})
    }
EOF

  reduce = <<EOF
    function(key, values) {
      var count = 0; published = 0;
      values.forEach(function(doc) {
        count += parseInt(doc.count);
        published += parseInt(doc.published);
        type = doc.type
      );
      return {type: type, count: count, published: published}
    }
EOF

  collection.mapreduce(map, reduce).find()

end
</pre>


<p>In our case that will return something like the following, or rather more specifically it will return a Mongo::Cursor that allows you to get at the following data.</p>

<pre>[{"_id"=>"Publication", "value"=>{"type"=>"Publication", "count"=>42.0, "published"=>29.0}},
{"_id"=>"LongerPublication", "value"=>{"type"=>"LongerPublication", "count"=>12.0, "published"=>10.0}}]
</pre>


<p>I've been pretty impressed with both Mongo and Mongoid here. I like the feel of mapreduce jobs for this sort of reporting task. In particular it's suprising how writing two languages mixed together like this doesn't really affect the readability of the code in my view. Given that with a relational database you'd probably be writing SQL anyway maybe that's not that suprising - the syntactic differences between Javascript and Ruby are much smaller than pretty much anything and SQL. Lots of folks have written about the increase of polyglot programming, but I wonder if we'll see an increase in the embedding of one language in another?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Content to Markup ratio bookmarklet]]></title>
    <link href="http://www.morethanseven.net/2009/03/05/content-markup-ratio-bookmarklet/"/>
    <updated>2009-03-05T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/03/05/content-markup-ratio-bookmarklet</id>
    <content type="html"><![CDATA[<p>"Stoyan Stefanov":http://www.phpied.com/ just released an excellent little "bookmarklet to calculate a content to markup ratio":http://www.phpied.com/content-to-markup-ratio-bookmarklet/</p>

<p>It's interesting browsing around a few sites and comparing ratios:</p>

<ul>
<li>This site - 0.55</li>
<li>"bbc.co.uk":http://bbc.co.uk - 0.26</li>
<li>"capitalradio.co.uk":http://capitalradio.co.uk - 0.45</li>
<li>"clearleft.com":http://clearleft.com - 0.48</li>
<li>"alistapart.com":http://alistapart.com/ - 0.44</li>
</ul>

]]></content>
  </entry>
  
</feed>
