<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jruby | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/jruby/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-03-15T23:32:30+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self Contained Jruby Web Applications]]></title>
    <link href="http://www.morethanseven.net/2012/04/06/Self-contained-jruby-web-applications/"/>
    <updated>2012-04-06T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2012/04/06/Self-contained-jruby-web-applications</id>
    <content type="html"><![CDATA[<p>Several things seemed to come together at once to make me want to hack on this particular project. In no particular order:</p>

<p>The "Thoughtworks Technology Radar":http://www.thoughtworks.com/articles/technology-radar-march-2012 said the following:</p>

<p>bq. Embedding a servlet container, such as Jetty, inside a Java application has many advantages over running the application inside a container. Testing is relatively painless because of the simple startup, and the development environment is closer to production. Nasty surprises like mismatched versions of libraries or drivers are eliminated by not sharing across multiple applications. While you will have to manage and monitor multiple Java Virtual Machines in production using this model, we feel the advantages offered by the simplicity and isolation are significant.</p>

<p>I've been getting more interested in JRuby anyway, partly because we're finding ourselves using both Ruby and Scala at work, and maintaining a single target platform makes sense to me. Throw in the potential for interop between those languages and it's certainly worth investigating.</p>

<p>"Play 2.0":http://www.playframework.org/ shipped and currently only provides the ability to create a self contained executable with bundled web server. Creating WAR files for more traditional application servers is on the roadmap but interestingly wasn't deemed essential for the big 2.0 release. I had a nice chat with "Martyn Inglis":https://twitter.com/minglis at work about some of the nice side effects of this setup.</p>

<p>And throw in every time I have to configure straight Ruby applications for production environments I get cross. I know where all the bits and pieces are buried and can do it well, but with so many moving parts it's absolutely no fun whatsoever.</p>

<p>Warbler, the JRuby tool for creating WAR files from Ruby source, has just added the ability to "embed Jetty to the master branch":https://github.com/jruby/warbler/commit/0558a285eb59a0801cf7c0f274777b06b63883b3.</p>

<p>I decided to take all of this for a quick spin, and the "resulting code is up on GitHub":https://github.com/garethr/jruby-embedded-jetty.</p>

<p>This is the simplest Rack application possible, it just prints <em>Hello Jetty</em>. And the README covers how to install and run it so I won't duplcate that information here.</p>

<p>But I will print some nearly meaningless and unscientific benchmarks because, hey, who doesn't like those?</p>

<pre>âš¡ ab -c 50 -n 5000 http://localhost:8090/

Server Software:        Jetty(8.y.z-SNAPSHOT)
Server Hostname:        localhost
Server Port:            8090

Document Path:          /
Document Length:        16 bytes

Concurrency Level:      50
Time taken for tests:   1.827 seconds
Complete requests:      5000
Failed requests:        0
Write errors:           0
Total transferred:      555999 bytes
HTML transferred:       80144 bytes
Requests per second:    2736.47 [#/sec] (mean)
Time per request:       18.272 [ms] (mean)
Time per request:       0.365 [ms] (mean, across all concurrent requests)
Transfer rate:          297.16 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    2   2.2      1      18
Processing:     1   16   7.7     15      61
Waiting:        0   14   7.2     13      57
Total:          2   18   7.5     17      61

Percentage of the requests served within a certain time (ms)
  50%     17
  66%     19
  75%     21
  80%     22
  90%     27
  95%     30
  98%     42
  99%     52
 100%     61 (longest request)
</pre>


<p>Running the same test on the same machine but using Ruby 1.9.2-p290 and Thin gives.</p>

<pre>Server Software:        thin
Server Hostname:        localhost
Server Port:            9292

Document Path:          /
Document Length:        16 bytes

Concurrency Level:      50
Time taken for tests:   3.125 seconds
Complete requests:      5000
Failed requests:        0
Write errors:           0
Total transferred:      620620 bytes
HTML transferred:       80080 bytes
Requests per second:    1600.16 [#/sec] (mean)
Time per request:       31.247 [ms] (mean)
Time per request:       0.625 [ms] (mean, across all concurrent requests)
Transfer rate:          193.96 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.3      0       9
Processing:     3   31   6.4     33      52
Waiting:        3   25   6.4     28      47
Total:          4   31   6.4     33      52

Percentage of the requests served within a certain time (ms)
  50%     33
  66%     34
  75%     34
  80%     35
  90%     38
  95%     41
  98%     46
  99%     50
 100%     52 (longest request)</pre>


<p>2736 requests per second on JRuby/Jetty vs 1600 on Ruby/Thin. As noted this isn't meaningfully useful, in that it's a hello world example and I've not tried to pick the fastest stacks on either side. I'm more bothered about it not being slower, because the main reason to pursue this approach is simplicity. Having a single self contained artefact that contains all it's dependencies including a production web server is very appealing.</p>

<p>I'm hoping to give this a go with some less trivial applications, and probably more importantly look to compare a production stack based around these self-contained executables vs the dependency chain that is modern Ruby application stacks.</p>

<p>Thanks to "Nick Sieger":http://blog.nicksieger.com/ for both writing Warbler and for helping with a few questions on the JRuby mailing list and on Twitter. Thanks also to "James Abley":https://twitter.com/jabley for a few pointers on Java system properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smoke Testing With Cucumber On Sysadvent]]></title>
    <link href="http://www.morethanseven.net/2010/12/20/Smoke-testing-with-cucumber-on-sysadvent/"/>
    <updated>2010-12-20T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2010/12/20/Smoke-testing-with-cucumber-on-sysadvent</id>
    <content type="html"><![CDATA[<p>I wrote a quick article last week for the excellent "sysadvent":http://sysadvent.blogspot.com advent calendar, "Smoke Testing Deployments with Cucumber":http://sysadvent.blogspot.com/2010/12/day-17-smoke-testing-deployments-using.html talks a bit more about using a few of my favourite tools to check whether a deployment just broke anything important.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinatra On Glassfish Example]]></title>
    <link href="http://www.morethanseven.net/2010/11/28/Sinatra-on-glassfish-example/"/>
    <updated>2010-11-28T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2010/11/28/Sinatra-on-glassfish-example</id>
    <content type="html"><![CDATA[<p>I magically turned into a Java developer last week for a bit when I had to do some integration with a SOAP based API that really really wanted me to write Java on client as well. That led me down the route of having a good look at Jruby (which I've used before, mainly for testing using celerity) and in particular how easy it was to use native Java classes in Jruby (very, very easy as it turns out).</p>

<p>All that meant I'll probably end up writing a nice Jruby application in the not too distant future, and not knowing too much about running such a thing in a production environment I thought I'd take a quick look. I went with Glassfish as the application server for no other reason that it took my fancy. I'd definately be interested in hearing about any positive or negative experiences people may have with it or other similar servers. My quick look turned into running a tiny Sinatra application.</p>

<p>First install the required gems for our little experiment. You'll obviously need jruby which is sort of the point, I'd recommend using RVM for that.</p>

<pre><code>gem install sinatra warbler</pre>


<p></code></p>

<p>Now create a sinatra app. OK, it could be any Ruby rack based application but I like Sinatra. First we need a rackup file.</p>

<pre><code># config.ru
require 'init'

set :run, false
set :environment, :production

run Sinatra::Application</pre>


<p></code></p>

<p>Now for our application itself.</p>

<pre><code># init.rb
require 'rubygems'
require 'sinatra'
get '/' do
  "Hello World!"
end</pre>


<p></code></p>

<p>Warble is the gem we're going to use to create a WAR file, which is basically an all in one bundle of our application and it's dependencies which we can deploy to a java application server.</p>

<pre><code># config/warble.rb
Warbler::Config.new do |config|
  config.dirs = %w(config)
  config.includes = FileList["init.rb"]
  config.gems += ["sinatra"]
  config.gems -= ["rails"]
  config.gem_dependencies = true
end</pre>


<p></code></p>

<p>Now we're ready to generate our WAR file.</p>

<pre><code>warble</pre>


<p></code></p>

<p>This should create a file called sample.war or similar. Then just deploy that to your application server and away you go. I got this working very easily with Glassfish which seemed to be the recommended tool for such things. Installing Glassfish was time consuming but "well documented here":http://www.nabisoft.com/tutorials/glassfish/installing-glassfish-301-on-ubuntu. Uploading to Glassfish was done via the web interface for the moment. I just selected a Ruby project from the deployment drop down and uploaded the war file.</p>
]]></content>
  </entry>
  
</feed>
