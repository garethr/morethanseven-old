<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pypi | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/pypi/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2013-12-29T15:22:59+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Your Own PyPi server]]></title>
    <link href="http://www.morethanseven.net/2009/08/15/your-own-pypi-server/"/>
    <updated>2009-08-15T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2009/08/15/your-own-pypi-server</id>
    <content type="html"><![CDATA[<p>So one of the problems with using pip or easy_install as part of an automated deployment process is they rely on an internet connection. More than that, they rely on PyPi being up as it's a centralised system, unlike all the apt package mirrors.</p>

<p>The best solution seems to be to host your own PyPi compliant server. Not only can you load all the third party modules you use onto it, but you could also upload any internal applications or libraries that you like. By running this on your local network you ensure your not dependent on pypi or an internet connection.</p>

<p>At the moment I'm playing with "Chishop":http://github.com/ask/chishop/tree/master which is a django application for maintaining a PyPi compatible server. Another alternative if that doesn't work out is "EggBasket":http://pypi.python.org/pypi/EggBasket/</p>

<p>To install from your own PyPi server you can specify the location of your Chishop instance with the -i flag.</p>

<p>pre. easy_install -i http://localhost:8000/ PACKAGE_NAME</p>

<p>This will fall back to the PyPi server if it doesn't find the relevant package. If you want to stop that behaviour and make sure you have a local package then you can limit the hosts with the -H flag like so.</p>

<p>pre. easy_install -H localhost:8000 -i http::/localhost:8000/ PACKAGE_NAME</p>

<p>I'm not yet sure how to do this with pip, if someone wants to enlighten me in the comments then I'd be most grateful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Urltest on PyPi]]></title>
    <link href="http://www.morethanseven.net/2009/06/24/urltest-pypi/"/>
    <updated>2009-06-24T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2009/06/24/urltest-pypi</id>
    <content type="html"><![CDATA[<p>I've been meaning to add some of my code to the "Python Package Index":http://pypi.python.org for a while and  have finally gotten around to it with "Urltest":http://github.com/garethr/urltest/tree/master, my simple DSL for testing WSGI apps.</p>

<p>You can now find it at "pypi.python.org/pypi/urltest":http://pypi.python.org/pypi/urltest and install it using setuptools with:</p>

<p>pre. easy_install urltest</p>

<p>At the moment I've not added any categorisation or detailed description to the setup.py file, I'll be doing that soon. I wanted to get it working with the absolute minimum setup.py file, which turned out to look like:</p>

<p>pre. #!/usr/bin/env python
from setuptools import setup, find_packages
setup(</p>

<pre><code>name = "urltest",
version = "0.1",
author = "Gareth Rushgrove",
author_email = "gareth@morethanseven.net",    
url = "http://github.com/garethr/urltest",
packages = find_packages('src'),
package_dir = {'':'src'},
</code></pre>

<p>)</p>

<p>Uploading it to PYPI itself was incredibly simple, partly as I was already using setup tools for local installation.</p>

<p>pre. python setup.py register
python setup.py bdist_egg upload</p>

<p>Let me know if anyone uses this and gets it working. I'll be adding more details and maybe even some more features when I get the chance. Once I do that I'll probably work on a few more packages as well.</p>
]]></content>
  </entry>
  
</feed>
