<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/security/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2013-12-26T18:51:05+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web application security tools]]></title>
    <link href="http://www.morethanseven.net/2013/04/23/web-application-security-tools/"/>
    <updated>2013-04-23T07:57:00+01:00</updated>
    <id>http://www.morethanseven.net/2013/04/23/web-application-security-tools</id>
    <content type="html"><![CDATA[<p>I've become increasingly interested in web application security issues over the last year or so. Working in Government will do that to you. And I've come to the conclusion that a) there are lots of good open source security tools, b) many of them are terribly packaged and c) most developers don't use any of them.</p>

<p>I've been having related conversations at recent events I've made it along to, including Devopsdays London which featured some good open spaces discussions on the subject. Security is one of those areas that, for many organisations, is basically outsourced to third party penetration testing firms or consultants. Specialists definitely have a role to play, but with a move towards increasingly rapid releases I think in-house security testing and monitoring is going to get more and more important.</p>

<p>h2. A collection of security tools</p>

<p>I've started to build a "collection of tools on GitHub":https://github.com/garethr/pentesting-playground, along with a vagrant setup to test them out. Full instructions are available on that repository but the short version is you can run one command and have one virtual machine filled with security testing tools and, if useful, another machine running a vulnerable web application with which to test. The current list of tools runs to:</p>

<ul>
<li>"skipfish":http://code.google.com/p/skipfish/</li>
<li>"nmap":http://nmap.org/</li>
<li>"nikto":http://www.cirt.net/nikto2</li>
<li>"w3af":http://w3af.org/</li>
<li>"garmr":https://github.com/mozilla/Garmr</li>
<li>"sslyze":https://github.com/iSECPartners/sslyze</li>
<li>"wpscanner":https://github.com/metachris/wpscanner</li>
<li>"owasp zap":https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project</li>
<li>"arachni":http://arachni-scanner.com/</li>
<li>"gauntlt":https://github.com/gauntlt/gauntlt</li>
<li>"sqlmap":http://sqlmap.org/</li>
<li>"wpscan":http://wpscan.org/</li>
<li>"sslscan":http://sourceforge.net/projects/sslscan/</li>
<li>"TLSSLed":http://blog.taddong.com/2013/02/tlssled-v13.html</li>
</ul>


<p>But I'll add more tools as I discover them or as people file issues or pull requests.</p>

<p>h2. What about Backtrack?</p>

<p>When I started investigating tools for security and penetration testing most roads led to "Backtrack":http://www.backtrack-linux.org/. This is a complete Linux distribution packed with a huge number of security tools, including many if not all of the above. Why then did I write puppet code rather than create a Vagrant box from Backtrack? Firstly, Backtrack is probably great if you're a professional penetration tester, but the barrier to entry to installing a new distibution for most developers is too high in my view. And with a view to using some of these tools as part of monitoring systems I don't always want a separate virtual machine. I want to be able to install the tools wherever I want. A good configuration management tool gives you that portability, and Vagrant gives you all the benefits of a local virtual machine.</p>

<p>h2. Future plans</p>

<p>As mentioned I'd like to expand how some of these tools are used to include automated monitoring of applications, maybe look at ways of extracting data for metrics or possibily writing a Sensu plugin or two. The first step to that is probably breaking down the monolithic puppet manifest into separate modules for each tool. Along the way I can add support for more operating systems as required. I've already done that for the "wackopicko module which is up on the Forge":http://forge.puppetlabs.com/garethr/wackopicko.</p>

<p>I'm also soliciting any and all feedback, especially from developers who don't do any security related testing but feel like they should.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piston And Sanitising Json Callbacks]]></title>
    <link href="http://www.morethanseven.net/2010/03/08/Piston-and-sanitising-json-callbacks/"/>
    <updated>2010-03-08T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2010/03/08/Piston-and-sanitising-json-callbacks</id>
    <content type="html"><![CDATA[<p>I'm a big fan of "Piston":http://bitbucket.org/jespern/django-piston, the django app for creating RESTful web services. As part of a project at work I ended up looking through the source code, mainly at some of the neat tricks of serialisation of objects. While poking around I came across something in my mind that wanted fixing. This being open source rather than just file a bug report I setup a "bitbucket":http://bitbucket.org account and got hacking.</p>

<p><notextile>
&lt;% syntax_colorize :python, type=:coderay do %>
def render(self, request):</p>

<pre><code>cb = request.GET.get('callback')
    seria = simplejson.dumps(self.construct(),
    cls=DateTimeAwareJSONEncoder,
    ensure_ascii=False, indent=4)

    # Callback
    if cb:
        return '%s(%s)' % (cb, seria)

    return seria
</code></pre>

<p>&lt;% end %>
</notextile></p>

<p>Can you spot the problem? Note the use of the callback passed in the query string arguments and then used <em>without any checking</em> in the output.</p>

<p>What we really want to do is something like this:</p>

<p><notextile>
&lt;% syntax_colorize :python, type=:coderay do %>
if is_valid_jsonp_callback_value(cb):
&lt;% end %>
</notextile></p>

<p>Which is exactly what has just "gone into the code for Piston":http://bitbucket.org/jespern/django-piston/changeset/f558b2c66dcc/. "This article":http://tav.espians.com/sanitising-jsonp-callback-identifiers-for-security.html contains lots of background information about why JSONP callbacks can be a security hole, and helpfully provides a "nice Python module":http://github.com/tav/scripts/blob/master/validate_jsonp.py to help with the sanitisation. Nice to be on the authors list for something I'm using actively.</p>

<p>Thanks to "Jesper Noehr":http://twitter.com/jespern for Piston, for some pointers on bitbucket and for quickly taking the patch. If you're accepting a callback on your site or application, especially if it's a public service, you really want to do something like this or you just might have an exploitable security hole.</p>
]]></content>
  </entry>
  
</feed>
