<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/security/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-02-16T22:45:42+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making the web secure, one unit test at a time]]></title>
    <link href="http://www.morethanseven.net/2013/12/29/making-the-web-secure/"/>
    <updated>2013-12-29T14:28:00+00:00</updated>
    <id>http://www.morethanseven.net/2013/12/29/making-the-web-secure</id>
    <content type="html"><![CDATA[<p><em>Originally written as part of <a href="http://sysadvent.blogspot.co.uk/2013/12/day-21-making-web-secure-one-unit-test.html">Sysadvent 2013</a>.</em></p>

<p>Writing automated tests for your code is one of those things that,
once you have gotten into it, you never want to see code without tests
ever again. Why write pages and pages of documentation about how
something should work when you can write tests to show exactly how something does work? Looking at the number and quality of testing tools and frameworks (like cucumber,
rspec, <a href="https://github.com/test-kitchen/test-kitchen">Test Kitchen</a>,
<a href="http://serverspec.org/">Server Spec</a>,
<a href="https://github.com/puppetlabs/beaker">Beaker</a>,
<a href="http://casperjs.org/">Casper</a> and
<a href="http://pivotal.github.io/jasmine/">Jasmine</a> to name a few) that have
popped up in the last year or so I'm obviously not the only person who
has a thing for testing utilities.</p>

<p>One of the other things I am interested in is web application
security, so this post is all about using the tools and techniques
from unit testing to avoid common web application security issues. I'm
using Ruby in the examples but you could quickly convert these to other languages if you desire.</p>

<h2>Any port in a storm</h2>

<p>Lets start out with something simple. Accidentally exposing
applications on TCP ports can lead to data loss or introduce a vector
for attack. Maybe your main website is super secure, but you left the
port for your database open to the internet. It's the server configuration equivalent of forgetting to lock the back door.</p>

<p>Nmap is a tool lots of people will be familiar with for spanning for
open ports. As well as a command line interface Nmap also has good
library support in lots of languages so lets try and write a simple
tests suite around it.</p>

<pre><code>require "tempfile"
require "nmap/program"
require "nmap/xml"

describe "the scanme.nmap.org website" do
  file = Tempfile.new("nmap.xml")
  before(:all) do
    Nmap::Program.scan do |nmap|
      nmap.xml = file.path
      nmap.targets = "scanme.nmap.org"
    end
  end

  @open_ports = []
  Nmap::XML.new("scan.xml") do |xml|
    xml.each_host do |host|
      host.each_port do |port|
        @open_ports &lt;&lt; port.number if port.state == :open
      end
    end
  end
end
</code></pre>

<p>With the above code in place we can then write tests like:</p>

<pre><code>it "should have two ports open" do
 @open_ports.should have(2).items
end

it "should have port 80 open" do
 @open_ports.should include(80)
end

it "should have port 22 closed" do
 @open_ports.should_not include(22)
end
</code></pre>

<p>We can run these manually, but also potentially as part of a
continuous integration build or constantly as part of a monitoring
suite.</p>

<h2>Run the Guantlt</h2>

<p>We had to do quite a bit of work wrapping Nmap before we could write
the tests above. Wouldn't it be nice if someone had already wrapped
lots of useful security minded tools for us? <a href="http://gauntlt.org/">Gauntlt</a> is pretty much just that, it's a security testing framework based on cucumber which currently supports curl, nmap, sslyze, sqlmap, garmr and a bunch more tools in master. Lets do something more advanced than our port scanning test above by testing a URL for a SQL injection vulnerability.</p>

<pre><code>@slow
Feature: Run sqlmap against a target
  Scenario: Identify SQL injection vulnerabilities
    Given "sqlmap" is installed
    And the following profile:
      | name       | value                                      |
      | target_url | http://localhost/sql-injection?number_id=1 |
    When I launch a "sqlmap" attack with:
      """
      python &lt;sqlmap_path&gt; -u &lt;target_url&gt; —dbms sqlite —batch -v 0 —tables
      """
    Then the output should contain:
      """
      sqlmap identified the following injection points
      """
    And the output should contain:
      """
      [2 tables]
      +-----------------+
      | numbers         |
      | sqlite_sequence |
      +-----------------+
      """
</code></pre>

<p>The Gauntlt team publish <a href="https://github.com/gauntlt/gauntlt/tree/master/examples">lots of examples</a> like this one alongside the source code, so getting started is easy. Gauntlt is very powerful, but as you'll see from the example above you need to know quite a bit about the underlying tools it is using. In the case above you need to know the various arguments to sqlmap and also how to interpret the output.</p>

<h2>Enter Prodder</h2>

<p><a href="https://github.com/garethr/prodder">Prodder</a> is a tool I put together
to automate a few specific types of security testing. In many ways
it's very similar to Gauntlt; it uses the cucumber testing framework
and uses some of the same tools (like nmap and sslyze) under the hood.
However rather than a general purpose security framework like Gauntlt,
Prodder is higher level and very opinionated. Here's an example:</p>

<pre><code>Feature: SSL
  In order to ensure secure connections
  I want to check the SSL configuration of my servers
  Background:
    Given "sslyze.py" is installed
    Scenario: Check SSLv2 is disabled
      When we test using the "sslv2" protocol
      Then the exit status should be 0
      And the output should contain "SSLv2 disabled"

    Scenario: Check certificate is trusted
      When we check the certificate
      Then the output should contain "Certificate is Trusted"
      And the output should match /OK — (Common|Subject
</code></pre>

<p>Alternative) Name Matches/</p>

<pre><code>      And the output should not contain "Signature Algorithm: md5"
      And the output should not contain "Signature Algorithm: md2"
      And the output should contain "Key Size: 2048"

    Scenario: Check certificate renegotiations
      When we test certificate renegotiation
      Then the output should contain "Client-initiated
</code></pre>

<p>Renegotiations: Rejected"</p>

<pre><code>      And the output should contain "Secure Renegotiation: Supported"

    Scenario: Check SSLv3 is not using weak ciphers
      When we test using the "sslv3" protocol
      Then the output should not contain "Anon"
      And the output should not contain "96bits"
      And the output should not contain "40bits"
      And the output should not contain " 0bits"
</code></pre>

<p>This is a little higher level than the Gauntlt example — it's not
exposing the workings of sslyze that is doing the actual testing. All
you need is an understanding of SSL certifcates. Even if you're not an
expert on SSL you can accept the aforementioned opinions of Prodder
about what good looks like. Prodder currently contains steps and
exampes for port scanning, SSL certificates and security minded HTTP
headers. If you already have a cucumber based test suite (including
one based on Gauntlt) you can reuse the step definitions in that too.</p>

<p>I'm hoping to build upon Prodder, adding more types of tests and
getting agreement on the included opinions from the wider systems
administration community. By having a default set of shared assertions
about the expected security of out system we can more easily move onto
new projects, safe in the knowledge that a test will fail if someone
messes up our once secure configuration.</p>

<h2>I'm convinced, what should I do next?</h2>

<p>As well as trying out some of the above tools and techniques for
yourself I'd recommend encouraging more security conversations in your
development and operations teams. Here's a few  places to start with:</p>

<ul>
<li><a href="http://www.slideshare.net/beehooze/devopsday-london-ben-hughes-security">Ben Hughes from Etsy talking about security culture at Devopsdays London</a></li>
<li><a href="https://speakerdeck.com/garethr/security-monitoring-with-open-source-penetration-testing-tools">A presentation I gave at Velocity about using penetration testing tools for monitoring purposes</a></li>
<li><a href="http://www.slideshare.net/wickett/gauntlt-velocity-eu2013">A workshop, again from Velocity all about getting started with Gauntlt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web application security tools]]></title>
    <link href="http://www.morethanseven.net/2013/04/23/web-application-security-tools/"/>
    <updated>2013-04-23T07:57:00+01:00</updated>
    <id>http://www.morethanseven.net/2013/04/23/web-application-security-tools</id>
    <content type="html"><![CDATA[<p>I've become increasingly interested in web application security issues over the last year or so. Working in Government will do that to you. And I've come to the conclusion that a) there are lots of good open source security tools, b) many of them are terribly packaged and c) most developers don't use any of them.</p>

<p>I've been having related conversations at recent events I've made it along to, including Devopsdays London which featured some good open spaces discussions on the subject. Security is one of those areas that, for many organisations, is basically outsourced to third party penetration testing firms or consultants. Specialists definitely have a role to play, but with a move towards increasingly rapid releases I think in-house security testing and monitoring is going to get more and more important.</p>

<p>h2. A collection of security tools</p>

<p>I've started to build a "collection of tools on GitHub":https://github.com/garethr/pentesting-playground, along with a vagrant setup to test them out. Full instructions are available on that repository but the short version is you can run one command and have one virtual machine filled with security testing tools and, if useful, another machine running a vulnerable web application with which to test. The current list of tools runs to:</p>

<ul>
<li>"skipfish":http://code.google.com/p/skipfish/</li>
<li>"nmap":http://nmap.org/</li>
<li>"nikto":http://www.cirt.net/nikto2</li>
<li>"w3af":http://w3af.org/</li>
<li>"garmr":https://github.com/mozilla/Garmr</li>
<li>"sslyze":https://github.com/iSECPartners/sslyze</li>
<li>"wpscanner":https://github.com/metachris/wpscanner</li>
<li>"owasp zap":https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project</li>
<li>"arachni":http://arachni-scanner.com/</li>
<li>"gauntlt":https://github.com/gauntlt/gauntlt</li>
<li>"sqlmap":http://sqlmap.org/</li>
<li>"wpscan":http://wpscan.org/</li>
<li>"sslscan":http://sourceforge.net/projects/sslscan/</li>
<li>"TLSSLed":http://blog.taddong.com/2013/02/tlssled-v13.html</li>
</ul>


<p>But I'll add more tools as I discover them or as people file issues or pull requests.</p>

<p>h2. What about Backtrack?</p>

<p>When I started investigating tools for security and penetration testing most roads led to "Backtrack":http://www.backtrack-linux.org/. This is a complete Linux distribution packed with a huge number of security tools, including many if not all of the above. Why then did I write puppet code rather than create a Vagrant box from Backtrack? Firstly, Backtrack is probably great if you're a professional penetration tester, but the barrier to entry to installing a new distibution for most developers is too high in my view. And with a view to using some of these tools as part of monitoring systems I don't always want a separate virtual machine. I want to be able to install the tools wherever I want. A good configuration management tool gives you that portability, and Vagrant gives you all the benefits of a local virtual machine.</p>

<p>h2. Future plans</p>

<p>As mentioned I'd like to expand how some of these tools are used to include automated monitoring of applications, maybe look at ways of extracting data for metrics or possibily writing a Sensu plugin or two. The first step to that is probably breaking down the monolithic puppet manifest into separate modules for each tool. Along the way I can add support for more operating systems as required. I've already done that for the "wackopicko module which is up on the Forge":http://forge.puppetlabs.com/garethr/wackopicko.</p>

<p>I'm also soliciting any and all feedback, especially from developers who don't do any security related testing but feel like they should.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piston And Sanitising Json Callbacks]]></title>
    <link href="http://www.morethanseven.net/2010/03/08/Piston-and-sanitising-json-callbacks/"/>
    <updated>2010-03-08T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2010/03/08/Piston-and-sanitising-json-callbacks</id>
    <content type="html"><![CDATA[<p>I'm a big fan of "Piston":http://bitbucket.org/jespern/django-piston, the django app for creating RESTful web services. As part of a project at work I ended up looking through the source code, mainly at some of the neat tricks of serialisation of objects. While poking around I came across something in my mind that wanted fixing. This being open source rather than just file a bug report I setup a "bitbucket":http://bitbucket.org account and got hacking.</p>

<p><notextile>
&lt;% syntax_colorize :python, type=:coderay do %>
def render(self, request):</p>

<pre><code>cb = request.GET.get('callback')
    seria = simplejson.dumps(self.construct(),
    cls=DateTimeAwareJSONEncoder,
    ensure_ascii=False, indent=4)

    # Callback
    if cb:
        return '%s(%s)' % (cb, seria)

    return seria
</code></pre>

<p>&lt;% end %>
</notextile></p>

<p>Can you spot the problem? Note the use of the callback passed in the query string arguments and then used <em>without any checking</em> in the output.</p>

<p>What we really want to do is something like this:</p>

<p><notextile>
&lt;% syntax_colorize :python, type=:coderay do %>
if is_valid_jsonp_callback_value(cb):
&lt;% end %>
</notextile></p>

<p>Which is exactly what has just "gone into the code for Piston":http://bitbucket.org/jespern/django-piston/changeset/f558b2c66dcc/. "This article":http://tav.espians.com/sanitising-jsonp-callback-identifiers-for-security.html contains lots of background information about why JSONP callbacks can be a security hole, and helpfully provides a "nice Python module":http://github.com/tav/scripts/blob/master/validate_jsonp.py to help with the sanitisation. Nice to be on the authors list for something I'm using actively.</p>

<p>Thanks to "Jesper Noehr":http://twitter.com/jespern for Piston, for some pointers on bitbucket and for quickly taking the patch. If you're accepting a callback on your site or application, especially if it's a public service, you really want to do something like this or you just might have an exploitable security hole.</p>
]]></content>
  </entry>
  
</feed>
