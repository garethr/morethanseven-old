<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wsgi | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/wsgi/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-02-16T22:45:42+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django and WSGI deployment on Solaris]]></title>
    <link href="http://www.morethanseven.net/2009/08/21/django-wsgi-deployment-solaris/"/>
    <updated>2009-08-21T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2009/08/21/django-wsgi-deployment-solaris</id>
    <content type="html"><![CDATA[<p>Now I'm generally an Ubuntu guy, but I've just had the need to setup some boxes running Solaris for Django and a handful of WSGI applications. I know my way around Ubuntu pretty well. I know all the packages I need to install and in what order. Hell, I even have all that scripted so I can just run a command and it works by magic. I'll script the following steps if I can do when I get round to it but here, in one list, are the installation instructions for Apache, mod_wsgi, Mysql, MySQLdb, setuptools and memcached that worked for me on the latest version of "Open Solaris":http://www.opensolaris.com/ (2009.06 at the time of writing).</p>

<p>First up I needed to install Apache and start the service running.</p>

<pre>pfexec pkg install SUNWapch22
svcadm enable http:apache22</pre>


<p>You should be able to test that's running by hitting localhost on a browser running on the same box. Now for MySQL.</p>

<pre>pfexec pkg install SUNWmysql5
svcadm enable mysql:version_50</pre>


<p>This installs the mysql binary into /usr/mysql/5.0/bin/mysql on the system I'm working on. As I want to talk to the MySQL database server using Python I need to install MySQLdb.</p>

<pre>pfexec pkg install SUNWmysql-python
ln -s /usr/mysql/5.0/lib/mysql/libmysqlclient_r.so.15 /usr/lib/libmysqlclient_r.so.15</pre>


<p>This installs the library files into /usr/mysql/5.0/lib and Python doesn't know were to find them. The above command links them into the more standard /usr/lib folder were Python will pick it up nicely.</p>

<p>I tend to use "mod_wsgi":http://code.google.com/p/modwsgi/ for serving Python apps behind Apache,  however a mod_wsgi package isn't part of the default package list. It is however available in the pending list so first you need to add that list of packages.</p>

<pre>pfexec pkg set-authority -O http://pkg.opensolaris.org/pending pending
pfexec pkg refresh
pfexec pkg install mod-wsgi</pre>


<p>This installs the module but you then need to tell Apache to load it. Add the following line to /etc/apache2/2.2/conf.d/modules-32.load or /etc/apache2/2.2/conf.d/modules-64.load depending on your architecture.</p>

<pre>LoadModule wsgi_module    libexec/mod_wsgi.so</pre>


<p>To get Apache to load that module you need to restart it like so:</p>

<pre>svcadm restart http:apache22</pre>


<p>I use "Pip":http://pypi.python.org/pypi/pip for installing Python code, but tend to install setuptools to make installing Pip easier. I don't know if an up to date Pip package exists.</p>

<pre>pfexec pkg install python-setuptools</pre>


<p>This should leave you with easy_install on your path so installing Pip, then virtualenv should be a breeze.</p>

<p>As an added bonus I also installed memcached for some snappy caching.</p>

<pre>pfexec pkg install SUNWmemcached</pre>


<p>This won't start up by default and needs a little configuration. The first command will launch you into a prompt where you can type the rest of the commands.</p>

<pre>svccfg
svc:> select memcached
svc:/application/database/memcached> setprop memcached/options=("-u" "nobody")
svc:/application/database/memcached> quit</pre>


<p>Once you'd done that you should be able to start memcache on the standard port.</p>

<pre>svcadm refresh memcached
svcadm enable memcached</pre>


<p>Et voila. The internet helped massively on my quest to track down this information. Not all of the following links turned out to work for me but all of them led me in the right direction. Thanks everyone.</p>

<ul>
<li>http://blogs.sun.com/quenelle/entry/jazz_guitar_and_rpath</li>
<li>http://blogs.sun.com/natarajan/entry/installing_amp_stack_within_glassfish</li>
<li>http://blogs.sun.com/overstre/entry/django_on_solaris10_with_the</li>
<li>https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_SMI-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=Web-Stack-1.5-OTH-G-F@CDS-CDS_SMI</li>
<li>http://wiki.joyent.com/mod_wsgi</li>
<li>http://textusers.com/wiki/AcceleratorDjango</li>
<li>http://wiki.joyent.com/accelerators:kb:django</li>
<li>http://www.b-list.org/weblog/2007/sep/04/django-accelerated/</li>
<li>http://blogs.sun.com/natarajan/entry/getting_ruby_or_amp_apache</li>
<li>http://blogs.sun.com/overstre/entry/opensolaris_with_mod_wsgi</li>
<li>http://branesks.blogspot.com/2009/01/installing-modwsgi-on-opensolaris.html</li>
<li>http://blogs.sun.com/overstre/entry/django_on_opensolaris</li>
<li>http://code.google.com/p/modwsgi/wiki/InstallationOnSolaris</li>
<li>http://groups.google.com/group/modwsgi/browse_thread/thread/7e2cc7ce366253cc</li>
<li>http://blogs.sun.com/lr/entry/django_setup_mysql_python_opensolaris</li>
<li>http://blogs.sun.com/trond/entry/memcached_in_solaris</li>
<li>http://blog.hendrikvolkmer.de/2009/1/29/deploying-a-rails-application-on-opensolaris-with-passenger-aka-modrails/</li>
</ul>


<p>I'm not a Solaris admin. I'm not really a sysadmin at all, I just end up pretending to be one of late. Any experienced Solaris people with experience of these tools reading this I'd be grateful for any hints and tips. Hopefully this saves a few people from the head scratching I've been doing for the last few days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Urltest on PyPi]]></title>
    <link href="http://www.morethanseven.net/2009/06/24/urltest-pypi/"/>
    <updated>2009-06-24T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2009/06/24/urltest-pypi</id>
    <content type="html"><![CDATA[<p>I've been meaning to add some of my code to the "Python Package Index":http://pypi.python.org for a while and  have finally gotten around to it with "Urltest":http://github.com/garethr/urltest/tree/master, my simple DSL for testing WSGI apps.</p>

<p>You can now find it at "pypi.python.org/pypi/urltest":http://pypi.python.org/pypi/urltest and install it using setuptools with:</p>

<p>pre. easy_install urltest</p>

<p>At the moment I've not added any categorisation or detailed description to the setup.py file, I'll be doing that soon. I wanted to get it working with the absolute minimum setup.py file, which turned out to look like:</p>

<p>pre. #!/usr/bin/env python
from setuptools import setup, find_packages
setup(</p>

<pre><code>name = "urltest",
version = "0.1",
author = "Gareth Rushgrove",
author_email = "gareth@morethanseven.net",    
url = "http://github.com/garethr/urltest",
packages = find_packages('src'),
package_dir = {'':'src'},
</code></pre>

<p>)</p>

<p>Uploading it to PYPI itself was incredibly simple, partly as I was already using setup tools for local installation.</p>

<p>pre. python setup.py register
python setup.py bdist_egg upload</p>

<p>Let me know if anyone uses this and gets it working. I'll be adding more details and maybe even some more features when I get the chance. Once I do that I'll probably work on a few more packages as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing WSGI Application with Urltest]]></title>
    <link href="http://www.morethanseven.net/2009/06/04/testing-wsgi-application-urltest/"/>
    <updated>2009-06-04T00:00:00+01:00</updated>
    <id>http://www.morethanseven.net/2009/06/04/testing-wsgi-application-urltest</id>
    <content type="html"><![CDATA[<p>I found myself wanted something to make writing high level, functional tests for WSGI application easier and quicker. If I liked the term I'd call it a domain specific language for testing URLs. Basically I found myself writing a lot of tests like:</p>

<p>pre. def test_404_handler(self):</p>

<pre><code>response = self.app.get('/does-not-exist', expect_errors=True)        
self.assertEquals("404 Not Found", response.status)
</code></pre>

<p>Testing more than a view URLs like this got boring quickly. What I wanted was a short hand syntax for defining this sort of simple test and then running them all individually. So was born "Urltest":http://github.com/garethr/urltest/tree/master. It uses the rather nifty "Webtest":http://pypi.python.org/pypi/WebTest/0.9 module and hooks into unittest from the standard library. You're test script then looks a little like:</p>

<p>pre. #!/usr/bin/env python
from example_app import application
from urltest import verify_urls
if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>urls = (
    {'url':"/", 'code':200},
    {'url':"/bob", 'code':200},
    {'url':"/jim", 'code':404},
    {'url':"/jim", 'method': "POST", 'code':405},
)    
verify_urls(urls, application)
</code></pre>

<p>Let me know if you use it as at the moment this is <em>works for me</em> ware, although it's reasonably well tested and commented.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple WSGI Middleware (for App Engine)]]></title>
    <link href="http://www.morethanseven.net/2009/03/18/simple-wsgi-middleware-app-engine/"/>
    <updated>2009-03-18T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/03/18/simple-wsgi-middleware-app-engine</id>
    <content type="html"><![CDATA[<p>bq. WSGI is the Web Server Gateway Interface. It is a specification for web servers and application servers to communicate with web applications (though it can also be used for more than that). It is a Python standard, described in detail in "PEP 333":http://www.python.org/dev/peps/pep-0333/.</p>

<p>For Ruby people WSGI is the "Rack":http://rack.rubyforge.org/ in Python. In fact it was one of the inspirations behind Rack. Rack descriptions itself as:</p>

<p>bq. Rack provides an minimal interface between webservers supporting Ruby and Ruby frameworks.</p>

<p>Which I think is a clearer explanation, except in WSGI's case we replace Ruby with Python.</p>

<p>As well as being able to write WSGI middleware for Django or Pylons we can also write WSGI middleware for App Engine applications - which is what I spent some time doing today. For the most part I found the examples and documentation interesting but overkill for what I needed to do. Specifically I wanted a piece of middleware which modified the response content, adding extra content into the response. Most of the examples I found didn't focus on middleware, or where full blown examples making them hard to follow.</p>

<p>So for anyone looking for a simple example of WSGI middleware which adds content into the response here goes. I used the "WebOb":http://pythonpaste.org/webob/ framework because it provides a nicer interface to the request and response objects and it's included in the standard App Engine SDK. The following sample middleware simple adds <em>Hello World</em> to the end of every response.</p>

<p>pre. from webob import Request
class SimpleMiddleware(object):</p>

<pre><code>"Example middleware that appends a message to all 200 html responses"    
def __init__(self, app):
    self.app = app
def __call__(self, environ, start_response):       
    # deal with webob request and response objects
    # due to a nicer interface
    req = Request(environ)
    resp = req.get_response(self.app)
    # add a string to the end of the body
    body = resp.body + "Hello World"
    # set the body to the new copy
    resp.body = body
    return resp(environ, start_response)
</code></pre>

<p>In reality you might want to append something to a specific place in the response, or introduce conditionals. This is easy enough to do by parsing the initial value of <em>resp.body</em> in the example above.</p>

<p>To use the middleware in your application you simple wrap your current WSGIApplication instance with the middleware class.</p>

<p>pre. application = webapp.WSGIApplication(ROUTES, debug=settings.DEBUG)</p>

<h1>add simple middleware</h1>

<p>application = SimpleMiddleware(application)
run_wsgi_app(application)</p>

<p>WSGI middleware is both a useful place for common functionality to live in your App Engine application as well as being a handy tool for anyone working across multiple Python frameworks to share code.</p>
]]></content>
  </entry>
  
</feed>
