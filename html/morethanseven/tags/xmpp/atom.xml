<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xmpp | Morethanseven]]></title>
  <link href="http://www.morethanseven.net/tags/xmpp/atom.xml" rel="self"/>
  <link href="http://www.morethanseven.net/"/>
  <updated>2014-01-25T18:50:55+00:00</updated>
  <id>http://www.morethanseven.net/</id>
  <author>
    <name><![CDATA[Gareth Rushgrove]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Example of using XMPP on App Engine (via IMified)]]></title>
    <link href="http://www.morethanseven.net/2009/02/21/example-using-xmpp-app-engine-imified/"/>
    <updated>2009-02-21T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/02/21/example-using-xmpp-app-engine-imified</id>
    <content type="html"><![CDATA[<p>As I "mentioned before":http://morethanseven.net/2009/02/07/xmpp-and-offline-processing-coming-google-app-engi/, App Engine is getting an XMPP API at some point soon. But if you just can't wait to start adding IM interfaces to your applications then you <em>can</em> do it now, by using a nifty third party in "IMified":http://imified.com/.</p>

<p>IMified provide an incredibly simple HTTP API for interacting with your own IM bot. If we want to be buzz word compliant we might even call it a "webhook":http://webhooks.pbwiki.com. It's also currently a free service while they work through the beta. The "documentation":http://new.imified.com/developers/api is short and to the point but only contains examples in PHP. It supports multiple step <em>conversations</em> as well as authentication.</p>

<p>So, armed with a little time on the train over the last few days I got to work knocking together a quick demo application as a proof of concept. You can find the site on "imified-demo.appspot.com":http://imified-demo.appspot.com/ and if you want to chat with the bot you can add <em>appengineimified@bot.im</em> to your contacts. The bot uses the Jabber protocol so is available over Jabber or GTalk. IMified make it easy to use MSN or Yahoo IM accounts as well, which is something the App Engine API might very well not do I would imagine.</p>

<p><img src="http://image-host.appspot.com/i/img?id=agppbWFnZS1ob3N0cgwLEgVJbWFnZRjRDww" alt="Screengrab of the IMified App Engine site"/></p>

<p>As always you can find the code on "GitHub":http://github.com/garethr/appengine-imified/tree/master. Most of the code is actually just the site itself or settings to make local development easier. The following is a slightly edited version of the live code (logging and caching removed to make it easier to follow). All we need to do is accept a HTTP Post request with a list of arguments and return a plain text response. All being well the response is sent as a IM message to the sender.</p>

<p>pre. class IMified(webapp.RequestHandler):</p>

<pre><code>"This is the endpoint for the message from IMified"
def post(self):
    "We recieve post data from IMified"
    userkey = self.request.get('userkey')
    network = self.request.get('network')
    msg = self.request.get('msg')
    step = self.request.get('step')
    try:
        # we try and create the message
        message = Message(
            userkey = userkey,
            network = network,
            msg = msg,
            step = int(step)
        )   
        message.put()
        # the response is send as an IM message to the sender
        self.response.out.write('Message saved')
    except:
        self.response.out.write('An error ocured, message not saved')
</code></pre>

<p>IMified can obviously be used outside App Engine as well, and in fact it's not just about working around limitations in existing systems. Running the long running processes required for bots, and potentially even running your own XMPP server, is fiddly at times and requires at least some setup, monitoring and configuration to get working. Not having that as a barrier for entry for simple experiments or applications is a good thing.</p>

<p>"Aral":http://aralbalkan.com/ spoke at the last "DJUGL":http://groups.google.com/group/django-london about App Engine and mentioned a wide range of third party services that you can use to get around current limitations. IMified definitely fits into this group of support services very nicely indeed. I'd love to see them do really well as it really makes it much easier to get started with XMPP applications, even if what you can do is limited to a few simple APIs. I'd love to hear about other services that people are using in this way to build these distributed applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XMPP and offline processing coming to Google App Engine]]></title>
    <link href="http://www.morethanseven.net/2009/02/07/xmpp-and-offline-processing-coming-google-app-engi/"/>
    <updated>2009-02-07T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/02/07/xmpp-and-offline-processing-coming-google-app-engi</id>
    <content type="html"><![CDATA[<p>Three weeks ago I pondered whether "XMPP and offline processing were coming to Google App Engine?":http://morethanseven.net/2009/01/15/are-xmpp-and-offline-processing-coming-google-app-/. It was a hunch based on the upcoming release of Jaiku on App Engine. I reasoned you couldn't really do it without XMPP and offline processing APIs. Looks like I was right.</p>

<p>Today "Joe Gregorio":http://bitworking.org/news/ announced on the "App Engine Blog":http://googleappengine.blogspot.com/ an "update to the roadmap for the next 6 months":http://googleappengine.blogspot.com/2009/02/roadmap-update.html; including</p>

<ul>
<li>Support for running scheduled tasks</li>
<li>Task queues for performing background processing</li>
<li>Ability to receive and process incoming email</li>
<li>Support for sending and receiving XMPP (Jabber) messages</li>
</ul>


<p>Colour me excited. This could be the point were we start seeing more and more interesting IM interfaces. And this ticks off several of my must haves for App Engine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simple Python Jabber Bot]]></title>
    <link href="http://www.morethanseven.net/2009/01/18/simple-python-jabber-bot/"/>
    <updated>2009-01-18T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/01/18/simple-python-jabber-bot</id>
    <content type="html"><![CDATA[<p>I've been knocking together various little instant messaging bots recently, partly as a way to play around with XMPP. As well as using the low level "xmppy":http://xmpppy.sourceforge.net/ and "XMPP4R-Simple":http://code.google.com/p/xmpp4r-simple/ libraries I've been having lots of fun with the "JabberBot":http://thpinfo.com/2007/python-jabberbot/ framework.</p>

<p>Jabberbot lets you write simple bots incredibly quickly, using simple conventions to determine what commands the bot exposes. It's easier to explain with a simple example. The following bot lets you send the command <em>time</em> to it and returns the current time on the server on which the bot is running. The magic is in the name of the method <em>bot_time</em>. Any methods that start bot_ are automatically exposed as commands for the bot to accept.</p>

<p>You'll need an xmpp server for the bot to connect to but you could always just register an additional google account and use it over gtalk if you wanted to. Personally I'm running "ejabberd":http://www.ejabberd.im on a local Ubuntu VM as well for testing.</p>

<p>pre. from jabberbot import JabberBot
import datetime
class SystemInfoJabberBot(JabberBot):</p>

<pre><code>def bot_time( self, mess, args):
    """Displays current server time"""
    return str(datetime.datetime.now())
</code></pre>

<p>username = 'my-jabberid@jabberserver.example.org'
password = 'my-password'
bot = SystemInfoJabberBot(username,password)
bot.serve_forever()</p>

<p>The JabberBot site has a few more examples as well with fancier features. At the recent Last.fm hackday I spent a bit of time knocking together a bot which talks to the Last.fm API (using the "PyLast":http://code.google.com/p/pylast/ library for the API backwards and forwards.) I did this mainly as a demonstration of how simple it can be to create a useful command line interface to your API using an instant messaging client.</p>

<p>The code for "LastBot":http://github.com/garethr/lastbot/tree/master is on GitHub. It has a few limitations and doesn't intent to cover anywhere near all the API. When up and running you should be able to talk to it with your IM client. Simply send the user specified in the settings file a message like so:</p>

<p>pre. search {query}</p>

<p>So if you wanted to search for “astley” you would type:</p>

<p>pre. search astley</p>

<p>Which would probably give you:</p>

<p>pre. you probably mean Never Gonna Give You Up by Rick Astley
http://www.last.fm/music/Rick_Astley/_/Never_Gonna_Give_You_Up
Richard Paul Astley (born February 6, 1966) is an English dance-pop singer,
songwriter and musician. He was born in Newton-le-Willows, St Helens,
Lancashire, England. Astley currently resides in Richmond, Surrey with his
Danish girlfriend, Lene Bausager, and their daughter, Emilie. In 1985, Astley
was playing the club circuit as a singer with a soul band named FBI, when he
was seen by the record producer Pete Waterman and persuaded to come to London
to work at the PWL recording studio.</p>

<p>If the first result that comes back isn’t the one you wanted you can ask for the next result by simply sending next in another message. You can use prev as well to come back through the set.</p>

<p>pre. next</p>

<p>You can always send it a call for help at any time which should return the instructions to you via an IM message.</p>

<p>pre. help</p>

<p>Which should return something like:</p>

<p>pre. Personal LastFM search bot. Useful for looking for tracks you can't
remember the full name of. Or for findind out who sung a track.
search: do a search for tracks
prev: get details about the previous track in the list
next: get details about the next track in the list</p>

<p>More instructions, and the code behind the bot, can be found in the "README":http://github.com/garethr/lastbot/tree/master.</p>

<p>As developers we spend a lot of time using command line interfaces - mainly for speed and because you can cram a lot of functionality into a small amount of screen real estate. We're increasingly spending time debugging API calls as well and exposing your API calls for use by instant messaging clients has the potential to make development easier. Think of the Python interactive shell or of IRB, but for APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are XMPP and offline processing coming to Google App Engine?]]></title>
    <link href="http://www.morethanseven.net/2009/01/15/are-xmpp-and-offline-processing-coming-google-app-/"/>
    <updated>2009-01-15T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/01/15/are-xmpp-and-offline-processing-coming-google-app-</id>
    <content type="html"><![CDATA[<p>Google "just announced":http://google-code-updates.blogspot.com/2009/01/changes-for-jaiku-and-farewell-to.html that, once the port of "Jaiku":http://www.jaiku.com to App Engine is complete they will be Open Sourcing the code and stopping official development. I only used Jaiku sporadically in the heady days when everyone had to sign up for a new web 2.0 service every week or be mocked by their colleagues. What really interests me about this move though is what it means for App Engine.</p>

<p>If memory serves "Jaiku had an instant message interface":http://www.jaiku.com/blog/2007/08/30/jaiku-from-your-instant-messenger/. Does that mean App Engine is going to get an XMPP interface?</p>

<p>I'm also presuming the original Jaiku application had at least some features powered by offline processing or used a message based architecture behind the scenes? Or used scheduled batch jobs for reporting or data mungling?</p>

<p>All of these issues are high up on the "App Engine issues list":http://code.google.com/p/googleappengine/issues/list and solutions to these two outstanding problems would move App Engine, in my opinion, to being very cool to being very useful. I've been impressed with the simple, well designed and well documented current set of APIs and I'd love to see a few more added for XMPP and offline processing. If the Jaiku code is open source but relies on Google only APIs it would seem a little odd.</p>

<p>So does anyone have any more information on this? Any passing Googlers who can get us an answer?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APIs in 2009 - XMPP and WebHooks]]></title>
    <link href="http://www.morethanseven.net/2009/01/02/apis-2009-xmpp-and-webhooks/"/>
    <updated>2009-01-02T00:00:00+00:00</updated>
    <id>http://www.morethanseven.net/2009/01/02/apis-2009-xmpp-and-webhooks</id>
    <content type="html"><![CDATA[<p>Everyone has to have a post with a year in the title at the start of the year so I thought I better write something. Rather than one of those personal retrospective emails I thought I'd go for something different - a look at what I'd like to see in APIs in the coming year.</p>

<p>h2. Webhooks</p>

<p>I'm pretty interested in the idea of applications exposing "Webhooks":http://webhooks.pbwiki.com/ at the moment. It's a pretty simple idea. As a user of a service you can register your own HTTP end points to receive information whenever events occur in the service.  Both "Shopify":http://wiki.shopify.com/WebHook and "GiHub":http://github.com/guides/post-receive-hooks have pretty nifty hooks for extending their capabilities for instance. When someone pushes code to a git repository you could send a ping to trigger a process to update the documentation for example.</p>

<p>With the rise of hosted application development environments like "AppEngine":http://code.google.com/appengine/ writing small, nearly throwaway, apps to subscribe to these hooks could become incredibly powerful. It's a lot like how unix programmers think, by piping lots of small applications together to get to the expected end result. It's not a replacement for the more standard read/write API, but it's a potential solution to the need to constantly poll that API for some types of applications.</p>

<p>The idea of public webhooks would be hugely powerful, but would also likely be a scalability nightmare. Imagine if Flickr exposed a hook that you could subscribe to whenever anyone added a public photo. Or Twitter added a hook for when anyone tweeted. These sorts of hooks would quickly be swamped with subscribers. The number of HTTP requests being sent by a service like Flickr under these circumstances would be <em>rather large</em> to say the least. Which is where another technology that's designed for this sort of problem becomes useful.</p>

<p>h2. XMPP Interfaces</p>

<p>"XMPP":http://xmpp.org/ or the Extensible Messaging and Presence Protocol has been around for a while, although originally under the name Jabber. It's predominantly being used at the moment as a instant messaging protocol, but in reality it's far more general purpose than that. Or rather, IM is generally considered to be between two or more people. But their is no reason that either or all the participants in an XMPP session can't be programs.</p>

<p>On my local machine I'm a big fan of the command line for all sorts of simple, and sometimes complex, tasks.  If applications expose their APIs via an XMPP bot then you basically have a ready made command line interface to online services via your IM client of choice. Combined with a solution to the public webhook problem mentioned above and you can hopefully see why I find XMPP pretty interesting.</p>

<p>I've been playing with writing XMPP bots recently, both at our internal hackday and at the recent "Last.fm event":http://github.com/garethr/lastbot/tree/master. Their are various libraries and code examples lying around the internet that make getting started easy enough. With services like "Imified":http://imified.com/ getting setup last year I'd imagine it will get easier still this year.</p>

<p>As for what I'm going to be up to along these lines, we'll have to wait and see. I have a few pet projects that I'd like to get off the ground which might be good test beds for this sort of thing. Apart from that I'd like to write some <em>getting started</em> style tutorials on some of the technologies involved or maybe a full blown article on the theory if I can find somewhere to publish it. A barcamp presentation or two might also fall off the back if I do get the time to play around a little more. But that's just me. If you're building, or planning on developing, an API for a product at the moment I'd suggest having a look at these two areas. They might turn out to just be potential extensions to what you had planned. Or they might turn out to be just the right approach to the problems you'll face getting people to use your API.</p>
]]></content>
  </entry>
  
</feed>
